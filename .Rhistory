ggplot(power_df, aes(x=KWH))+
geom_histogram(bins=40)+
labs(title = "Monthly Distributions Residential Power Usage | Jan '98 - Dec '13")
power_df %>%
autoplot(KWH) +
labs(title = "Monthly Distributions Residential Power Usage | Jan '98 - Dec '13")
# made a copy of the data first
power_df2<-power_df
power_df2$KWH <- na.interp(power_df2$KWH)
power_df2$KWH <- replace(power_df2$KWH, power_df2$KWH == min(power_df2$KWH),
median(power_df2$KWH))
ggplot(power_df2, aes(x=KWH))+
geom_histogram()+
labs(title = "Monthly Distributions Residential Power Usage | Jan '98 - Dec '13")
#summary
summary(power_df2$KWH)
#ts plot
power_df2 %>%
autoplot(KWH) +
labs(title = "Monthly Distributions Residential Power Usage | Jan '98 - Dec '13")+
ylab(label= "KWH (Thousands)")
#get lambda
(power_lambda <- power_df2 %>%
features(KWH, features = guerrero) %>%
pull(lambda_guerrero))
power_df2 <- power_df2 %>%
mutate(KWH_bc = box_cox(KWH, power_lambda))
summary(power_df2$KWH_bc)
ggplot(power_df2, aes(x=KWH_bc))+
geom_histogram()+
labs(title = "Monthly Distributions Residential Power Usage | Jan '98 - Dec '13")
power_df2 %>%
autoplot(KWH_bc) +
labs(y = "KWH in Thousands",
title = "Transformed KWH with Lambda = -0.2130548")
power_df2 %>%
model(
STL(KWH_bc ~ trend(window = 13) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
ndiffs(power_df2$KWH_bc)
power_df2 %>%
ACF(KWH_bc, lag_max = 36) %>%
autoplot()
diff_power <- power_df2 %>%
mutate(diff_KWH= difference(KWH), diff_KWH_bc = difference(KWH_bc))
diff_power<-diff_power%>%
select(-KWH, -KWH_bc)%>%
slice(-1)
ndiffs(diff_power$diff_KWH_bc)
#Differenced data for arima
#split
power_train_diff <- diff_power %>%
filter(year(DATE) < 2013)
#models
power_fit_diff <- power_train_diff %>%
model(
ARIMA = ARIMA(diff_KWH),
`Auto ARIMA` = ARIMA(diff_KWH, stepwise = FALSE, approx = FALSE)
)
#forecast of 2013
power_forecast_diff <- power_fit_diff %>%
forecast(h = "1 year")
#plot
power_forecast_diff %>%
autoplot(diff_power, level = NULL)+
facet_wrap( ~ .model, scales = "free_y") +
guides(colour = guide_legend(title = "Forecast"))+
labs(title= "KWH Forecasts | Jan '13 - Dec '13")+
xlab("Month") +
ylab("KWH in Thousands")
#split
power_train <- power_df2 %>%
filter(year(DATE) < 2013)
#models
power_fit <- power_train %>%
model(
ETS = ETS(KWH),
`Additive ETS` = ETS(KWH ~ error("A") + trend("A") + season("A")),
SNAIVE = SNAIVE(KWH)
)
#forecast of 2013
power_forecast <- power_fit %>%
forecast(h = "1 year")
#plot
power_forecast %>%
autoplot(power_df2, level = NULL)+
facet_wrap( ~ .model, scales = "free_y") +
guides(colour = guide_legend(title = "Forecast"))+
labs(title= "KWH Forecasts | Jan '13 - Dec '13")+
xlab("Month") +
ylab("KWH in Thousands")
#find ARIMA RMSE, MAE
accuracy(power_forecast_diff, diff_power) %>%
select(.model, RMSE:MAE)
#find other RMSE, MAE
accuracy(power_forecast, power_df2) %>%
select(.model, RMSE:MAE)
#reproduce the mode using the original dataset
power_ETS_fit <- power_df2 %>%
model(`Additive ETS` = ETS(KWH ~ error("A") + trend("A") + season("A")))
#generate the values
power_ETS_forecast <- power_ETS_fit %>%
forecast(h=12)
#plot
power_ETS_forecast %>%
autoplot(power_df2) +
labs(title = "Monthly Residential Power Usage (Additive ETS |2024)",
y = "KWH in Thousands")
(power_forecast_results <-
as.data.frame(power_ETS_forecast) %>%
select(DATE, .mean) %>%
rename('KWH Forecast' = .mean))
write_excel_csv(atm1_forecast_results, "atm1_forecast.csv")
library(fpp3)
library(dplyr)
library(ggplot2)
library(readxl)
library(tsibble)
library(psych)
library(tidyr)
library(forecast)
library(readr)
write_excel_csv(atm1_forecast_results, "atm1_forecast.csv")
write_excel_csv(atm2_forecast_results, "atm2_forecast.csv")
write_excel_csv(atm4_forecast_results, "atm4_forecast.csv")
write_excel_csv(power_forecast_results, "power_forecast.csv")
library(fpp3)
library(dplyr)
library(ggplot2)
library(readxl)
library(tsibble)
library(psych)
library(tidyr)
library(forecast)
atm_coltype<-c("date","text","numeric")
atm_import<-read_xlsx('ATM624Data.xlsx', col_types = atm_coltype)
# Ommitting Extra Credit as I won't be working on it
# WP1_df<-read_xlsx('Waterflow_Pipe1.xlsx')
# WP2_df<-read_xlsx('Waterflow_Pipe2.xlsx')
power_raw<-read_xlsx('ResidentialCustomerForecastLoad-624.xlsx')
head(atm_import%>%
filter(ATM=="ATM4"))
atm_range<-range(atm_import$DATE)
atm_range[1]
atm_range[2]
sapply(atm_import, function(x) sum(is.na(x)))
data.frame(atm_import$DATE[atm_import$Cash %in% NA])
atm_import %>%
filter(DATE < "2010-05-01", !is.na(ATM)) %>%
ggplot(aes(x = Cash)) +
geom_histogram(bins = 30, color= "blue") +
facet_wrap(~ ATM, ncol = 2, scales = "free")
(atm_df <- atm_import %>%
mutate(DATE = as.Date(DATE)) %>%
filter(DATE<"2010-05-01")%>%
pivot_wider(names_from=ATM, values_from = Cash))
atm_df<-atm_df%>%
as_tsibble(index=DATE)
head(atm_df)
summary(atm_df)
atm_df[!complete.cases(atm_df), ]
atm_df%>%
select(DATE,ATM3)%>%
filter(ATM3>0)
# seasonality
atm_import %>%
filter(DATE < "2010-05-01", !is.na(ATM)) %>%
ggplot(aes(x = DATE, y = Cash, col = ATM)) +
geom_line(color="blue") +
facet_wrap(~ ATM, ncol = 2, scales = "free_y")+
labs(title = "Seasonality Plot", x = "Date", y = "Cash") +
theme_minimal()
median_value <- median(atm_df[["ATM1"]], na.rm = TRUE)
atm_df[["ATM1"]][is.na(atm_df[["ATM1"]])] <- median_value
median_value <- median(atm_df[["ATM2"]], na.rm = TRUE)
atm_df[["ATM2"]][is.na(atm_df[["ATM2"]])] <- median_value
atm_df[!complete.cases(atm_df), ]
atm1_df <- atm_df %>%
dplyr::select(DATE, ATM1)
atm1_df %>%
model(
STL(ATM1 ~ trend(window = 7) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
ndiffs(atm1_df$ATM1)
atm1_df %>%
ACF(ATM1, lag_max = 30) %>%
autoplot()
# train
atm1_train <- atm1_df %>%
filter(DATE <= "2010-04-01")
atm1_fit <- atm1_train %>%
model(
SNAIVE = SNAIVE(ATM1),
ETS = ETS(ATM1),
ARIMA = ARIMA(ATM1),
`Auto ARIMA` = ARIMA(ATM1, stepwise = FALSE, approx = FALSE)
)
# forecast April
atm1_forecast <- atm1_fit %>%
forecast(h = 30)
#plot
atm1_forecast %>%
autoplot(atm1_df, level = NULL)+
facet_wrap( ~ .model, scales = "free_y") +
guides(colour = guide_legend(title = "Forecast"))+
labs(title= "ATM1 Forecasts | April") +
xlab("Date") +
ylab("$$$ (In Hundreds)")
# RMSE
accuracy(atm1_forecast, atm1_df) %>%
select(.model, RMSE:MAPE)
# remade the model from source
atm1_fit_ets <- atm1_df %>%
model(ETS = ETS(ATM1))
atm1_forecast_ets <- atm1_fit_ets %>%
forecast(h=30)
atm1_forecast_ets %>%
autoplot(atm1_df) +
labs(title = "ATM1 Forecast (ETS) | May",
y = "$$$ (in Hundreds)")
(atm1_forecast_results <-
as.data.frame(atm1_forecast_ets) %>%
select(DATE, .mean) %>%
rename(Date = DATE, Cash = .mean)%>%
mutate(Cash=round(Cash,2)))
atm2_df <- atm_df %>%
dplyr::select(DATE, ATM2)
atm2_df %>%
model(
STL(ATM2 ~ trend(window = 7) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
ndiffs(atm2_df$ATM2)
unitroot_ndiffs(atm2_df$ATM2)
atm2_df %>%
ACF(ATM2, lag_max = 30) %>%
autoplot()
atm2_df <- atm2_df %>%
mutate(diff_ATM2= difference(ATM2))
atm2_train <- atm2_df %>%
filter(DATE <= "2010-04-01")
#run seasonal related models without the differenced data
atm2_fit_nondiff <- atm2_train %>%
model(
SNAIVE = SNAIVE(ATM2),
ETS = ETS(ATM2),
)
#run models with differenced data
atm2_fit_diff <- atm2_train %>%
slice(2:336) %>%
model(
ETS_diff = ETS(diff_ATM2),
ARIMA = ARIMA(diff_ATM2),
`Auto ARIMA` = ARIMA(diff_ATM2, stepwise = FALSE, approx = FALSE)
)
#forecast_ATM2 April
atm2_forecast_nondiff <- atm2_fit_nondiff %>%
forecast(h = 30)
#forecast_ATM2 April
atm2__forecast_diff <- atm2_fit_diff %>%
forecast(h = 30)
#plot
atm2_forecast_nondiff %>%
autoplot(atm2_df, level = NULL)+
facet_wrap( ~ .model, scales = "free_y") +
guides(colour = guide_legend(title = "Forecast"))+
labs(title= "ATM2 Forecasts | April") +
xlab("Date") +
ylab("$$$ (In Hundreds)")
#plot 2
atm2__forecast_diff %>%
autoplot(atm2_df, level = NULL)+
facet_wrap( ~ .model, scales = "free_y") +
guides(colour = guide_legend(title = "Forecast"))+
labs(title= "ATM2 Forecasts | April") +
xlab("Date") +
ylab("Cash")
accuracy(atm2_forecast_nondiff, atm2_df) %>%
select(.model, RMSE:MAPE)
accuracy(atm2__forecast_diff, atm2_df) %>%
select(.model, RMSE:MAPE)
atm2_fit_ets <- atm2_df %>%
model(
ETS = ETS(ATM2))
#generate the values
atm2_forecast_ets <- atm2_fit_ets %>%
forecast(h=30)
#plot
atm2_forecast_ets %>%
autoplot(atm2_df) +
labs(title = "ATM2 - ETS Forecast | May 2010",
y = "$$$ (In Hundreds)")
(atm2_forecast_results <-
as.data.frame(atm2_forecast_ets) %>%
select(DATE, .mean) %>%
rename(Date = DATE, Cash = .mean)%>%
mutate(Cash=round(Cash,2)))
atm4_df <- atm_df %>%
select(DATE, ATM4)
atm4_df %>%
model(
STL(ATM4 ~ trend(window = 7) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
(atm4_lambda <- atm4_df %>%
features(ATM4, features = guerrero) %>%
pull(lambda_guerrero))
atm4_transformed <- BoxCox(atm4_df$ATM4, lambda = atm4_lambda)
# Extract the transformed data
atm4_df$ATM4_T<-atm4_transformed
#plot
atm4_df%>%
autoplot(ATM4_T)
ndiffs(atm4_df$ATM4)
ndiffs(atm4_df$ATM4_T)
atm4_df %>%
ACF(ATM4_T, lag_max = 28) %>%
autoplot()
atm4_df <- atm4_df %>%
mutate(diff_ATM4= difference(ATM4_T))
atm4_train <- atm4_df %>%
filter(DATE <= "2010-04-01")
#run seasonal related models without the differenced data
atm4_fit_nondiff <- atm4_train %>%
model(
SNAIVE = SNAIVE(ATM4_T),
ETS = ETS(ATM4_T),
)
#run models with differenced data
atm4_fit_diff <- atm4_train %>%
slice(2:336) %>%
model(
ETS_diff = ETS(diff_ATM4),
ARIMA = ARIMA(diff_ATM4),
`Auto ARIMA` = ARIMA(diff_ATM4, stepwise = FALSE, approx = FALSE)
)
#forecast_ATM2 April
atm4_forecast_nondiff <- atm4_fit_nondiff %>%
forecast(h = 30)
#forecast_ATM2 April
atm4__forecast_diff <- atm4_fit_diff %>%
forecast(h = 30)
#plot
atm4_forecast_nondiff %>%
autoplot(atm4_df, level = NULL)+
facet_wrap( ~ .model, scales = "free_y") +
guides(colour = guide_legend(title = "Forecast"))+
labs(title= "ATM4 Forecasts | April") +
xlab("Date") +
ylab("$$$ (In Hundreds)")
#plot 2
atm4__forecast_diff %>%
autoplot(atm4_df, level = NULL)+
facet_wrap( ~ .model, scales = "free_y") +
guides(colour = guide_legend(title = "Forecast"))+
labs(title= "ATM4 Forecasts | April") +
xlab("Date") +
ylab("Cash")
accuracy(atm4_forecast_nondiff, atm4_df) %>%
select(.model, RMSE:MAPE)
accuracy(atm4__forecast_diff, atm4_df) %>%
select(.model, RMSE:MAPE)
atm4_fit_snaive <- atm4_df %>%
model(
SNAIVE = SNAIVE(ATM4_T))
#generate the values
atm4_forecast_snaive <- atm4_fit_snaive %>%
forecast(h=30)
#plot
atm4_forecast_snaive %>%
autoplot(atm4_df) +
labs(title = "ATM2 - SNAIVE Forecast | May 2010",
y = "$$$ (In Hundreds)")
(atm4_forecast_results <-
as.data.frame(atm4_forecast_snaive) %>%
select(DATE, .mean) %>%
rename(Date = DATE, Cash = .mean)%>%
mutate(Cash=round(Cash,2)))
str(power_raw)
describe(power_raw)
data.frame(power_raw$`YYYY-MMM`[power_raw$KWH %in% NA])
#change variable type
power_df <- power_raw %>%
mutate(DATE = yearmonth(`YYYY-MMM`), KWH = KWH/1000) %>%
select(-CaseSequence, -'YYYY-MMM') %>%
tsibble(index= DATE)
head(power_df)
ggplot(power_df, aes(x=KWH))+
geom_histogram(bins=40)+
labs(title = "Monthly Distributions Residential Power Usage | Jan '98 - Dec '13")
power_df %>%
autoplot(KWH) +
labs(title = "Monthly Distributions Residential Power Usage | Jan '98 - Dec '13")
# made a copy of the data first
power_df2<-power_df
power_df2$KWH <- na.interp(power_df2$KWH)
power_df2$KWH <- replace(power_df2$KWH, power_df2$KWH == min(power_df2$KWH),
median(power_df2$KWH))
ggplot(power_df2, aes(x=KWH))+
geom_histogram()+
labs(title = "Monthly Distributions Residential Power Usage | Jan '98 - Dec '13")
#summary
summary(power_df2$KWH)
#ts plot
power_df2 %>%
autoplot(KWH) +
labs(title = "Monthly Distributions Residential Power Usage | Jan '98 - Dec '13")+
ylab(label= "KWH (Thousands)")
#get lambda
(power_lambda <- power_df2 %>%
features(KWH, features = guerrero) %>%
pull(lambda_guerrero))
power_df2 <- power_df2 %>%
mutate(KWH_bc = box_cox(KWH, power_lambda))
summary(power_df2$KWH_bc)
ggplot(power_df2, aes(x=KWH_bc))+
geom_histogram()+
labs(title = "Monthly Distributions Residential Power Usage | Jan '98 - Dec '13")
power_df2 %>%
autoplot(KWH_bc) +
labs(y = "KWH in Thousands",
title = "Transformed KWH with Lambda = -0.2130548")
power_df2 %>%
model(
STL(KWH_bc ~ trend(window = 13) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
ndiffs(power_df2$KWH_bc)
power_df2 %>%
ACF(KWH_bc, lag_max = 36) %>%
autoplot()
diff_power <- power_df2 %>%
mutate(diff_KWH= difference(KWH), diff_KWH_bc = difference(KWH_bc))
diff_power<-diff_power%>%
select(-KWH, -KWH_bc)%>%
slice(-1)
ndiffs(diff_power$diff_KWH_bc)
#Differenced data for arima
#split
power_train_diff <- diff_power %>%
filter(year(DATE) < 2013)
#models
power_fit_diff <- power_train_diff %>%
model(
ARIMA = ARIMA(diff_KWH),
`Auto ARIMA` = ARIMA(diff_KWH, stepwise = FALSE, approx = FALSE)
)
#forecast of 2013
power_forecast_diff <- power_fit_diff %>%
forecast(h = "1 year")
#plot
power_forecast_diff %>%
autoplot(diff_power, level = NULL)+
facet_wrap( ~ .model, scales = "free_y") +
guides(colour = guide_legend(title = "Forecast"))+
labs(title= "KWH Forecasts | Jan '13 - Dec '13")+
xlab("Month") +
ylab("KWH in Thousands")
#split
power_train <- power_df2 %>%
filter(year(DATE) < 2013)
#models
power_fit <- power_train %>%
model(
ETS = ETS(KWH),
`Additive ETS` = ETS(KWH ~ error("A") + trend("A") + season("A")),
SNAIVE = SNAIVE(KWH)
)
#forecast of 2013
power_forecast <- power_fit %>%
forecast(h = "1 year")
#plot
power_forecast %>%
autoplot(power_df2, level = NULL)+
facet_wrap( ~ .model, scales = "free_y") +
guides(colour = guide_legend(title = "Forecast"))+
labs(title= "KWH Forecasts | Jan '13 - Dec '13")+
xlab("Month") +
ylab("KWH in Thousands")
#find ARIMA RMSE, MAE
accuracy(power_forecast_diff, diff_power) %>%
select(.model, RMSE:MAE)
#find other RMSE, MAE
accuracy(power_forecast, power_df2) %>%
select(.model, RMSE:MAE)
#reproduce the mode using the original dataset
power_ETS_fit <- power_df2 %>%
model(`Additive ETS` = ETS(KWH ~ error("A") + trend("A") + season("A")))
#generate the values
power_ETS_forecast <- power_ETS_fit %>%
forecast(h=12)
#plot
power_ETS_forecast %>%
autoplot(power_df2) +
labs(title = "Monthly Residential Power Usage (Additive ETS |2024)",
y = "KWH in Thousands")
(power_forecast_results <-
as.data.frame(power_ETS_forecast) %>%
select(DATE, .mean) %>%
rename('KWH Forecast' = .mean))
