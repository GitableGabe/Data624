missing.cols <- missing.cols[order(-missing.cols),]
kabelExtra::kable(missing.cols)
Soybean.incomplete <- drop_na(Soybean)
missing.cols <- Soybean.incomplete %>%
dplyr::select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
missing.cols <- t(missing.cols/nrow(Soybean))
missing.cols <- missing.cols[order(-missing.cols),]
kableExtra::kable(missing.cols)
Soybean.incomplete <- Soybean[!complete.cases(Soybean),]
missing.cols <- Soybean.incomplete %>%
dplyr::select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
missing.cols <- t(missing.cols/nrow(Soybean))
missing.cols <- missing.cols[order(-missing.cols),]
kableExtra::kable(missing.cols)
Soybean.incomplete <- drop_na(Soybean)
missing.cols <- Soybean.incomplete %>%
dplyr::select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
missing.cols <- t(missing.cols/nrow(Soybean))
missing.cols <- missing.cols[order(-missing.cols),]
kableExtra::kable(missing.cols)
Soybean.incomplete <- na.omit(Soybean)
missing.cols <- Soybean.incomplete %>%
dplyr::select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
missing.cols <- t(missing.cols/nrow(Soybean))
missing.cols <- missing.cols[order(-missing.cols),]
kableExtra::kable(missing.cols)
df_soybean.incomplete <- df_soybean[!complete.cases(df_soybean),]
missing.cols <- Soybean.incomplete %>%
dplyr::select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
missing.cols <- t(missing.cols/nrow(Soybean))
missing.cols <- missing.cols[order(-missing.cols),]
kableExtra::kable(missing.cols)
df_soybean.incomplete <- df_soybean[!complete.cases(df_soybean),]
missing.cols <- df_soybean.incomplete %>%
dplyr::select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
missing.cols <- t(missing.cols/nrow(Soybean))
missing.cols <- missing.cols[order(-missing.cols),]
kableExtra::kable(missing.cols)
df_soybean.incomplete <- df_soybean[!complete.cases(df_soybean),]
missing.cols <- df_soybean$incomplete %>%
dplyr::select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
library(mlbench)
library(dplyr)
library(ggplot2)
library(tsibble)
library(tidyr)
library(corrplot)
library(cowplot)
library(psych)
library(MASS)
library(gridExtra)
library(tidyr)
data(Glass)
str(Glass)
Glass %>%
dplyr::select(-10)%>%
gather() %>%
ggplot(aes(x=value))+
geom_histogram(fill="lightgreen")+
facet_wrap(~key,scales = "free")
corrplot(cor(Glass%>%dplyr::select(-10)),type="lower")
Glass%>%
dplyr::select("RI","Ca")%>%
ggplot(aes(x=RI,y=Ca))+
geom_point()+
geom_smooth(method="lm", se = FALSE,color="red")+
labs(x = "Refractive Index (RI)", y = "Calcium (Ca)",
title = "RI vs Ca Scatterplot" )
Glass%>%
dplyr::select("RI","Mg")%>%
ggplot(aes(x=RI,y=Mg))+
geom_point()+
labs(x = "Refractive Index (RI)", y = "Magnesium (Mg)",
title = "RI vs Mg Scatterplot" )
Glass %>%
dplyr::select(-10)%>%
gather() %>%
ggplot(aes(value))+
geom_boxplot()+
facet_wrap(~key,scales = "free")
data.frame(describe(Glass))%>%
dplyr::select(skew)
df_glass<-Glass
df_glass$log_Ba<-log(Glass$Ba)
df_glass$log_Fe<-log(Glass$Fe)
df_glass$log_K<-log(Glass$K)
plot_Ba <- ggplot(df_glass, aes(x = log_Ba)) +
geom_histogram(bins = 20, fill = "darkblue",
color = "black") +
labs(title = "Histogram of log-transformed Ba",
x = "log(Be)", y = "Frequency")
plot_Fe<-ggplot(df_glass, aes(x = log_Fe)) +
geom_histogram(bins = 20, fill = "blue",
color = "black") +
labs(title = "Histogram of log-transformed Fe",
x = "log(Be)", y = "Frequency")
plot_K<-ggplot(df_glass, aes(x = log_K)) +
geom_histogram(bins = 20, fill = "lightblue",
color = "black") +
labs(title = "Histogram of log-transformed K",
x = "log(Be)", y = "Frequency")
plot_grid(plot_Ba,plot_Fe,plot_K, ncol = 3)
# Box-Cox transformation for specified columns
df_glass_transformed <- df_glass
# Columns for Box-Cox transformation
columns <- c("RI", "Na", "Al", "Si", "Ca")
for (col in columns) {
transformed_col <- boxcox(df_glass[[col]] ~ 1, plotit=FALSE)
lambda <- transformed_col$x[which.max(transformed_col$y)]
if (lambda == 0) {
df_glass_transformed[[paste0("boxcox_", col)]] <- log(df_glass[[col]])
} else {
df_glass_transformed[[paste0("boxcox_", col)]] <- (df_glass[[col]]^lambda - 1) / lambda
}
}
# Replace null values with 0
df_glass_transformed[is.na(df_glass_transformed)] <- 0
# Create ggplot visualizations for each transformed column
plots <- list()
for (col in paste0("boxcox_", columns)) {
plots[[col]] <- ggplot(df_glass_transformed, aes(x = !!sym(col))) +
geom_histogram(bins = 20, fill = "orange", color = "black") +
labs(title = paste("Histogram of", col), x = col, y = "Frequency")
}
# Arrange plots in columns of 3
grid.arrange(grobs = plots, ncol = 3)
rm(list = ls(pattern = "(lambda|plot|glass|^col|col$)"))
data(Soybean)
## See ?Soybean for details
str(Soybean)
df_soybean <- Soybean#%>%dplyr::select(-1)
par(mfrow=c(2,2))
for (col in 2:ncol(Soybean)) {
hist( as.numeric(Soybean[,col]),main =   colnames(Soybean)[col], xlab = colnames(Soybean)[col])
}
# Function to count distinct numeric values, including NAs, in a column
count_distinct_numeric <- function(column) {
n_distinct(na.omit(column))
}
# Apply the function to each column of the data frame 'B'
distinct_counts <- sapply(Soybean, count_distinct_numeric)
# Reorder distinct counts in ascending order
distinct_counts <- distinct_counts[order(distinct_counts)]
# Remove columns with NA counts from the print output
distinct_counts <- distinct_counts[!is.na(distinct_counts)]
# Print the distinct counts for each column
print(distinct_counts)
Soybean%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(), names_to = "variables", values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n), x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing, "NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
top_na_classes <- function(data, class_variable) {
data %>%
group_by({{ class_variable }}) %>%
summarise(Proportion = mean(is.na(.))) %>%
ungroup() %>%
arrange(desc(Proportion)) %>%
head(5)
}
# Example usage:
top_na_classes(Soybean, Class)
df_incomplete <- df_soybean[!complete.cases(df_soybean),]
df_incomplete %>%
dplyr::select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
# missing.cols <- t(missing.cols/nrow(Soybean))
# missing.cols <- missing.cols[order(-missing.cols),]
# kableExtra::kable(missing.cols)
df_incomplete <- df_soybean[!complete.cases(df_soybean),]
case.count <- df_incomplete %>%
group_by(Class) %>%
tally()
df_incomplete <- df_soybean[!complete.cases(df_soybean),]
case.count <- df_incomplete %>%
group_by(Class) %>%
tally()
case.count
df_incomplete <- df_soybean[!complete.cases(df_soybean),]
(df_incomplete %>%
group_by(Class) %>%
tally())
library(mlbench)
library(dplyr)
library(ggplot2)
library(tsibble)
library(tidyr)
library(corrplot)
library(cowplot)
library(psych)
library(MASS)
library(gridExtra)
library(tidyr)
data(Glass)
str(Glass)
Glass %>%
dplyr::select(-10)%>%
gather() %>%
ggplot(aes(x=value))+
geom_histogram(fill="lightgreen")+
facet_wrap(~key,scales = "free")
corrplot(cor(Glass%>%dplyr::select(-10)),type="lower")
Glass%>%
dplyr::select("RI","Ca")%>%
ggplot(aes(x=RI,y=Ca))+
geom_point()+
geom_smooth(method="lm", se = FALSE,color="red")+
labs(x = "Refractive Index (RI)", y = "Calcium (Ca)",
title = "RI vs Ca Scatterplot" )
Glass%>%
dplyr::select("RI","Mg")%>%
ggplot(aes(x=RI,y=Mg))+
geom_point()+
labs(x = "Refractive Index (RI)", y = "Magnesium (Mg)",
title = "RI vs Mg Scatterplot" )
Glass %>%
dplyr::select(-10)%>%
gather() %>%
ggplot(aes(value))+
geom_boxplot()+
facet_wrap(~key,scales = "free")
data.frame(describe(Glass))%>%
dplyr::select(skew)
df_glass<-Glass
df_glass$log_Ba<-log(Glass$Ba)
df_glass$log_Fe<-log(Glass$Fe)
df_glass$log_K<-log(Glass$K)
plot_Ba <- ggplot(df_glass, aes(x = log_Ba)) +
geom_histogram(bins = 20, fill = "darkblue",
color = "black") +
labs(title = "Histogram of log-transformed Ba",
x = "log(Be)", y = "Frequency")
plot_Fe<-ggplot(df_glass, aes(x = log_Fe)) +
geom_histogram(bins = 20, fill = "blue",
color = "black") +
labs(title = "Histogram of log-transformed Fe",
x = "log(Be)", y = "Frequency")
plot_K<-ggplot(df_glass, aes(x = log_K)) +
geom_histogram(bins = 20, fill = "lightblue",
color = "black") +
labs(title = "Histogram of log-transformed K",
x = "log(Be)", y = "Frequency")
plot_grid(plot_Ba,plot_Fe,plot_K, ncol = 3)
# Box-Cox transformation for specified columns
df_glass_transformed <- df_glass
# Columns for Box-Cox transformation
columns <- c("RI", "Na", "Al", "Si", "Ca")
for (col in columns) {
transformed_col <- boxcox(df_glass[[col]] ~ 1, plotit=FALSE)
lambda <- transformed_col$x[which.max(transformed_col$y)]
if (lambda == 0) {
df_glass_transformed[[paste0("boxcox_", col)]] <- log(df_glass[[col]])
} else {
df_glass_transformed[[paste0("boxcox_", col)]] <- (df_glass[[col]]^lambda - 1) / lambda
}
}
# Replace null values with 0
df_glass_transformed[is.na(df_glass_transformed)] <- 0
# Create ggplot visualizations for each transformed column
plots <- list()
for (col in paste0("boxcox_", columns)) {
plots[[col]] <- ggplot(df_glass_transformed, aes(x = !!sym(col))) +
geom_histogram(bins = 20, fill = "orange", color = "black") +
labs(title = paste("Histogram of", col), x = col, y = "Frequency")
}
# Arrange plots in columns of 3
grid.arrange(grobs = plots, ncol = 3)
rm(list = ls(pattern = "(lambda|plot|glass|^col|col$)"))
data(Soybean)
## See ?Soybean for details
str(Soybean)
df_soybean <- Soybean#%>%dplyr::select(-1)
par(mfrow=c(2,2))
for (col in 2:ncol(Soybean)) {
hist( as.numeric(Soybean[,col]),main =   colnames(Soybean)[col], xlab = colnames(Soybean)[col])
}
# Function to count distinct numeric values, including NAs, in a column
count_distinct_numeric <- function(column) {
n_distinct(na.omit(column))
}
# Apply the function to each column of the data frame 'B'
distinct_counts <- sapply(Soybean, count_distinct_numeric)
# Reorder distinct counts in ascending order
distinct_counts <- distinct_counts[order(distinct_counts)]
# Remove columns with NA counts from the print output
distinct_counts <- distinct_counts[!is.na(distinct_counts)]
# Print the distinct counts for each column
print(distinct_counts)
Soybean%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(), names_to = "variables", values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n), x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing, "NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_incomplete <- df_soybean[!complete.cases(df_soybean),]
(df_incomplete %>%
group_by(Class) %>%
tally())
df_soybean%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(), names_to = "variables", values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n), x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing, "NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_incomplete <- df_soybean[!complete.cases(df_soybean),]
(df_incomplete %>%
group_by(Class) %>%
tally())
df_soybean%>%
select(-c("2-4-d-injury"))
df_soybean%>%
select(-"2-4-d-injury")
df_soybean%>%
dplyr::select(-"2-4-d-injury")
df_soybean%>%
dplyr::select(-c("2-4-d-injury"))
df_soybean%>%
dplyr::filter(Class!="2-4-d-injury")
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(), names_to = "variables", values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n), x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing, "NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_soybean%>%
filter(Class!="2-4-d-injury")
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(), names_to = "variables", values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n), x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing, "NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_soybean%>%
filter(Class!="2-4-d-injury")%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(), names_to = "variables", values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n), x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing, "NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_soybean%>%
filter(Class!=c("2-4-d-injury"))%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(), names_to = "variables", values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n), x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing, "NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_soybean%>%
filter(Class!=c("2-4-d-injury","cyst-nematode"))%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(), names_to = "variables", values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n), x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing, "NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_soybean%>%
filter(Class!=c("2-4-d-injury","cyst-nematode",
"diaporthe-pod-&-stem-blight",
"herbicide-injury","phytophthora-rot"))%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(), names_to = "variables", values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n), x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing, "NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_soybean%>%
filter(Class!=c("2-4-d-injury","cyst-nematode",
"diaporthe-pod-&-stem-blight",
"herbicide-injury","phytophthora-rot"))%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(),
names_to = "variables",
values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n),
x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing,
"NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_soybean%>%
filter(!Class %IN% c("2-4-d-injury","cyst-nematode",
"diaporthe-pod-&-stem-blight",
"herbicide-injury","phytophthora-rot"))%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(),
names_to = "variables",
values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n),
x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing,
"NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_soybean%>%
dplyr::filter(!Class %IN% c("2-4-d-injury","cyst-nematode",
"diaporthe-pod-&-stem-blight",
"herbicide-injury","phytophthora-rot"))%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(),
names_to = "variables",
values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n),
x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing,
"NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
df_soybean%>%
filter(!Class %in% c("2-4-d-injury","cyst-nematode",
"diaporthe-pod-&-stem-blight",
"herbicide-injury","phytophthora-rot"))%>%
summarise_all(list(~is.na(.))) %>%
pivot_longer(everything(),
names_to = "variables",
values_to = "missing") %>%
count(variables, missing) %>%
ggplot(aes(y = reorder(variables, n),
x = n, fill = missing)) +
geom_col(position = "fill") +
geom_text(aes(label = ifelse(missing,
"NA", "Non-NA")),
position = position_fill(vjust = 0.5),
color = "white", size = 4) +  # Add data labels
labs(title = "NA Proportion",
x = "Proportion") +
scale_fill_manual(values = c("grey", "darkgreen")) +
theme_minimal()
help("Soybean")
