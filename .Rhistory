sample_set <- sample(nrow(df_100k2), round(nrow(df_100k)*0.75), replace = FALSE)
df_100k_train <- df_100k2[sample_set, ]
df_100k_test <- df_100k2[-sample_set, ]
#check class distribution of original, train, and test sets
table_1k<-round(prop.table(table(dplyr::select(df_1k2, Region), exclude = NULL)),
4) * 100
table_1k_train<-round(prop.table(table(dplyr::select(df_1k_train , Region), exclude = NULL)),
4) * 100
table_1k_test<-round(prop.table(table(dplyr::select(df_1k_test, Region), exclude = NULL)),
4) * 100
table_100k<-round(prop.table(table(dplyr::select(df_100k2, Region), exclude = NULL)),
4) * 100
table_100k_train<-round(prop.table(table(dplyr::select(df_100k_train, Region), exclude = NULL)),
4) * 100
table_100k_test<-round(prop.table(table(dplyr::select(df_100k_test, Region), exclude = NULL)),
4) * 100
as.data.frame(table_1k)
as.data.frame(table_1k_train)
as.data.frame(table_1k_test)
as.data.frame(table_100k)
as.data.frame(table_100k_train)
as.data.frame(table_100k_test)
#build model via rpart package
model_100k <- rpart(Region ~ .,
method = "class",
data = df_100k_train,
control=rpart.control(minsplit=2, minbucket=1, cp=0.001)
)
#display decision tree
rpart.plot(model_100k)
View(df_100k2)
library(readr)
library(tidyverse)
library(tidymodels)
library(psych)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(labelled)
library(ggplot2)
library(ggforce)
library(kableExtra)
library(gridExtra)
url<-"https://raw.githubusercontent.com/GitableGabe/Data624_Data/main/"
df_1k <- read.csv(paste0(url,"1000%20Sales%20Records.csv"))
df_100k <- read.csv(paste0(url,"100000%20Sales%20Records.csv"))
str(df_1k)
str(df_100k)
kable(as.data.frame(table(df_1k$Region)) %>% arrange(desc(Freq)),
caption = "Frequency Region df_1k")
kable(as.data.frame(table(df_100k$Region)) %>% arrange(desc(Freq)),
caption = "Frequency Region df_100k")
kable(as.data.frame(table(df_1k$Item.Type )) %>% arrange(desc(Freq)),
caption = "Frequency Item.Type df_1k")
kable(as.data.frame(table(df_100k$Item.Type )) %>% arrange(desc(Freq)),
caption = "Frequency Item Type 100k")
kable(as.data.frame(table(df_1k$Sales.Channel )) %>% arrange(desc(Freq)),
caption = "Frequency Sales Channel 1k")
kable(as.data.frame(table(df_100k$Sales.Channel )) %>% arrange(desc(Freq)),
caption = "Frequency Sales Channel 100k")
# Dimensions
dim_1k_tmp<-dim(df_1k)
dim_100k_tmp<-dim(df_100k)
# Class
class_1k_tmp<-sapply(df_1k,class)
class_100k_tmp<-sapply(df_100k,class)
column_name_1k_tmp <- "Order.ID"
# Count the number of duplicates in the specified column
num_duplicates_1k_tmp <- sum(duplicated(df_1k[[column_name_1k_tmp]]) |
duplicated(df_1k[[column_name_1k_tmp]],
fromLast = TRUE))
column_name_100k_tmp <- "Order.ID"
# Count the number of duplicates in the specified column
num_duplicates_100k_tmp <- sum(duplicated(df_100k[[column_name_100k_tmp]]) |
duplicated(df_100k[[column_name_100k_tmp]],
fromLast = TRUE))
na_null_cnt_tmp<-(sum(colSums(is.na(df_1k) | is.null(df_1k)))+
sum(colSums(is.na(df_100k) | is.null(df_100k))))
region_tmp<-unique(df_1k$Region)
country_len_tmp<-length(unique(df_1k$Country))
df_1k[['Order.Date']] <- as.Date(df_1k[['Order.Date']], "%m/%d/%Y")
df_1k[['Ship.Date']] <- as.Date(df_1k[['Ship.Date']], "%m/%d/%Y")
df_100k[['Order.Date']] <- as.Date(df_100k[['Order.Date']], "%m/%d/%Y")
df_100k[['Ship.Date']] <- as.Date(df_100k[['Ship.Date']], "%m/%d/%Y")
df_1k[['Order.Priority']] <- as.factor(df_1k[['Order.Priority']])
df_100k[['Order.Priority']] <- as.factor(df_100k[['Order.Priority']])
df_1k[['Sales.Channel']] <- as.factor(df_1k[['Sales.Channel']])
df_100k[['Sales.Channel']] <- as.factor(df_100k[['Sales.Channel']])
df_1k[['Item.Type']] <- as.factor(df_1k[['Item.Type']])
df_100k[['Item.Type']] <- as.factor(df_100k[['Item.Type']])
df_1k[['Order.ID']] <- as.factor(df_1k[['Order.ID']])
df_100k[['Order.ID']] <- as.factor(df_100k[['Order.ID']])
df_1k[['Region']] <- as.factor(df_1k[['Region']])
df_100k[['Region']] <- as.factor(df_100k[['Region']])
describe(df_1k%>%
dplyr::select(contains("Unit") | contains("Total"))) %>%
dplyr::select(c(mean,sd,min,max,range,se,skew))
describe(df_100k%>%
dplyr::select(contains("Unit") | contains("Total"))) %>%
dplyr::select(c(mean,sd,min,max,range,se,skew))
plot_numeric_1k<-df_1k%>%
dplyr::select(contains("Unit") | contains("Total")) %>%
gather(variable, value, 1:6) %>%
ggplot(aes(value)) +
facet_wrap(~variable, scales = "free") +
geom_density(fill = "lightgreen", alpha=0.9, color="lightgreen") +
geom_histogram(aes(y=after_stat(density)), alpha=0.2, fill = "lightblue",
color="darkred", position="identity", bins = 40)
plot_numeric_100k<-df_100k%>%
dplyr::select(contains("Unit") | contains("Total")) %>%
gather(variable, value, 1:6) %>%
ggplot(aes(value)) +
facet_wrap(~variable, scales = "free") +
geom_density(fill = "lightgreen", alpha=0.9, color="lightgreen") +
geom_histogram(aes(y=after_stat(density)), alpha=0.2, fill = "lightblue",
color="darkred", position="identity", bins = 40)
grid.arrange(plot_numeric_1k,plot_numeric_100k,ncol=1)
par(mfrow = c(1, 2), mar = c(0, 0, 3, 0))
plot_corr_1k <- cor(df_1k %>%
dplyr::select(contains("Unit") | contains("Total")))
corrplot(plot_corr_1k, tl.col = 'darkgreen', diag = FALSE, type = "lower",
order = "hclust", addCoef.col = "darkgreen",
title = "1k",mar=c(0,0,1,0))
# Plot correlation for df_100k
plot_corr_100k <- cor(df_100k %>%
dplyr::select(contains("Unit") | contains("Total")))
corrplot(plot_corr_100k, tl.col = 'darkgreen', diag = FALSE, type = "lower",
order = "hclust", addCoef.col = "darkgreen",
title = "100k",mar=c(0,0,1,0))
df_1k2 <- df_1k %>%
# purrr::discard(is.numeric) %>%
select(-c(Country, Unit.Price, Total.Cost, Order.ID))
df_100k2 <- df_100k %>%
# purrr::discard(is.numeric) %>%
select(-c(Country, Unit.Price, Total.Cost, Order.ID))
#split into test/train set
#For df_1k
set.seed(2341)
sample_set <- sample(nrow(df_1k2), round(nrow(df_1k)*0.75), replace = FALSE)
df_1k_train <- df_1k2[sample_set, ]
df_1k_test <- df_1k2[-sample_set, ]
# For df_100k
sample_set <- sample(nrow(df_100k2), round(nrow(df_100k)*0.75), replace = FALSE)
df_100k_train <- df_100k2[sample_set, ]
df_100k_test <- df_100k2[-sample_set, ]
#check class distribution of original, train, and test sets
table_1k<-round(prop.table(table(dplyr::select(df_1k2, Region), exclude = NULL)),
4) * 100
table_1k_train<-round(prop.table(table(dplyr::select(df_1k_train , Region), exclude = NULL)),
4) * 100
table_1k_test<-round(prop.table(table(dplyr::select(df_1k_test, Region), exclude = NULL)),
4) * 100
table_100k<-round(prop.table(table(dplyr::select(df_100k2, Region), exclude = NULL)),
4) * 100
table_100k_train<-round(prop.table(table(dplyr::select(df_100k_train, Region), exclude = NULL)),
4) * 100
table_100k_test<-round(prop.table(table(dplyr::select(df_100k_test, Region), exclude = NULL)),
4) * 100
as.data.frame(table_1k)
as.data.frame(table_1k_train)
as.data.frame(table_1k_test)
as.data.frame(table_100k)
as.data.frame(table_100k_train)
as.data.frame(table_100k_test)
#build model via rpart package
model_100k <- rpart(Region ~ .,
method = "class",
data = df_100k_train,
control=rpart.control(minsplit=2, minbucket=1, cp=0.001)
)
#display decision tree
rpart.plot(model_100k)
levels(df_1k$Region)
#build model via rpart package
model_100k <- rpart(Region ~ .,
method = "class",
data = df_100k_train,
control=rpart.control(minsplit=5, minbucket=5, cp=0.001)
)
#display decision tree
rpart.plot(model_100k)
library(readr)
library(tidyverse)
library(tidymodels)
library(psych)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(labelled)
library(ggplot2)
library(ggforce)
library(kableExtra)
library(gridExtra)
url<-"https://raw.githubusercontent.com/GitableGabe/Data624_Data/main/"
df_1k <- read.csv(paste0(url,"1000%20Sales%20Records.csv"))
df_100k <- read.csv(paste0(url,"100000%20Sales%20Records.csv"))
str(df_1k)
str(df_100k)
kable(as.data.frame(table(df_1k$Region)) %>% arrange(desc(Freq)),
caption = "Frequency Region df_1k")
kable(as.data.frame(table(df_100k$Region)) %>% arrange(desc(Freq)),
caption = "Frequency Region df_100k")
kable(as.data.frame(table(df_1k$Item.Type )) %>% arrange(desc(Freq)),
caption = "Frequency Item.Type df_1k")
kable(as.data.frame(table(df_100k$Item.Type )) %>% arrange(desc(Freq)),
caption = "Frequency Item Type 100k")
kable(as.data.frame(table(df_1k$Sales.Channel )) %>% arrange(desc(Freq)),
caption = "Frequency Sales Channel 1k")
kable(as.data.frame(table(df_100k$Sales.Channel )) %>% arrange(desc(Freq)),
caption = "Frequency Sales Channel 100k")
# Dimensions
dim_1k_tmp<-dim(df_1k)
dim_100k_tmp<-dim(df_100k)
# Class
class_1k_tmp<-sapply(df_1k,class)
class_100k_tmp<-sapply(df_100k,class)
column_name_1k_tmp <- "Order.ID"
# Count the number of duplicates in the specified column
num_duplicates_1k_tmp <- sum(duplicated(df_1k[[column_name_1k_tmp]]) |
duplicated(df_1k[[column_name_1k_tmp]],
fromLast = TRUE))
column_name_100k_tmp <- "Order.ID"
# Count the number of duplicates in the specified column
num_duplicates_100k_tmp <- sum(duplicated(df_100k[[column_name_100k_tmp]]) |
duplicated(df_100k[[column_name_100k_tmp]],
fromLast = TRUE))
na_null_cnt_tmp<-(sum(colSums(is.na(df_1k) | is.null(df_1k)))+
sum(colSums(is.na(df_100k) | is.null(df_100k))))
region_tmp<-unique(df_1k$Region)
country_len_tmp<-length(unique(df_1k$Country))
df_1k[['Order.Date']] <- as.Date(df_1k[['Order.Date']], "%m/%d/%Y")
df_1k[['Ship.Date']] <- as.Date(df_1k[['Ship.Date']], "%m/%d/%Y")
df_100k[['Order.Date']] <- as.Date(df_100k[['Order.Date']], "%m/%d/%Y")
df_100k[['Ship.Date']] <- as.Date(df_100k[['Ship.Date']], "%m/%d/%Y")
df_1k[['Order.Priority']] <- as.factor(df_1k[['Order.Priority']])
df_100k[['Order.Priority']] <- as.factor(df_100k[['Order.Priority']])
df_1k[['Sales.Channel']] <- as.factor(df_1k[['Sales.Channel']])
df_100k[['Sales.Channel']] <- as.factor(df_100k[['Sales.Channel']])
df_1k[['Item.Type']] <- as.factor(df_1k[['Item.Type']])
df_100k[['Item.Type']] <- as.factor(df_100k[['Item.Type']])
df_1k[['Order.ID']] <- as.factor(df_1k[['Order.ID']])
df_100k[['Order.ID']] <- as.factor(df_100k[['Order.ID']])
df_1k[['Region']] <- as.factor(df_1k[['Region']])
df_100k[['Region']] <- as.factor(df_100k[['Region']])
levels(df_1k$Region)
describe(df_1k%>%
dplyr::select(contains("Unit") | contains("Total"))) %>%
dplyr::select(c(mean,sd,min,max,range,se,skew))
describe(df_100k%>%
dplyr::select(contains("Unit") | contains("Total"))) %>%
dplyr::select(c(mean,sd,min,max,range,se,skew))
plot_numeric_1k<-df_1k%>%
dplyr::select(contains("Unit") | contains("Total")) %>%
gather(variable, value, 1:6) %>%
ggplot(aes(value)) +
facet_wrap(~variable, scales = "free") +
geom_density(fill = "lightgreen", alpha=0.9, color="lightgreen") +
geom_histogram(aes(y=after_stat(density)), alpha=0.2, fill = "lightblue",
color="darkred", position="identity", bins = 40)
plot_numeric_100k<-df_100k%>%
dplyr::select(contains("Unit") | contains("Total")) %>%
gather(variable, value, 1:6) %>%
ggplot(aes(value)) +
facet_wrap(~variable, scales = "free") +
geom_density(fill = "lightgreen", alpha=0.9, color="lightgreen") +
geom_histogram(aes(y=after_stat(density)), alpha=0.2, fill = "lightblue",
color="darkred", position="identity", bins = 40)
grid.arrange(plot_numeric_1k,plot_numeric_100k,ncol=1)
par(mfrow = c(1, 2), mar = c(0, 0, 3, 0))
plot_corr_1k <- cor(df_1k %>%
dplyr::select(contains("Unit") | contains("Total")))
corrplot(plot_corr_1k, tl.col = 'darkgreen', diag = FALSE, type = "lower",
order = "hclust", addCoef.col = "darkgreen",
title = "1k",mar=c(0,0,1,0))
# Plot correlation for df_100k
plot_corr_100k <- cor(df_100k %>%
dplyr::select(contains("Unit") | contains("Total")))
corrplot(plot_corr_100k, tl.col = 'darkgreen', diag = FALSE, type = "lower",
order = "hclust", addCoef.col = "darkgreen",
title = "100k",mar=c(0,0,1,0))
df_1k2 <- df_1k %>%
# purrr::discard(is.numeric) %>%
select(-c(Country,Order.Date,Ship.Date, Unit.Price, Total.Cost, Order.ID))
df_100k2 <- df_100k %>%
# purrr::discard(is.numeric) %>%
select(-c(Country,Order.Date,Ship.Date, Unit.Price, Total.Cost, Order.ID))
#split into test/train set
#For df_1k
set.seed(2341)
sample_set <- sample(nrow(df_1k2), round(nrow(df_1k)*0.75), replace = FALSE)
df_1k_train <- df_1k2[sample_set, ]
df_1k_test <- df_1k2[-sample_set, ]
# For df_100k
sample_set <- sample(nrow(df_100k2), round(nrow(df_100k)*0.75), replace = FALSE)
df_100k_train <- df_100k2[sample_set, ]
df_100k_test <- df_100k2[-sample_set, ]
#check class distribution of original, train, and test sets
table_1k<-round(prop.table(table(dplyr::select(df_1k2, Region), exclude = NULL)),
4) * 100
table_1k_train<-round(prop.table(table(dplyr::select(df_1k_train , Region), exclude = NULL)),
4) * 100
table_1k_test<-round(prop.table(table(dplyr::select(df_1k_test, Region), exclude = NULL)),
4) * 100
table_100k<-round(prop.table(table(dplyr::select(df_100k2, Region), exclude = NULL)),
4) * 100
table_100k_train<-round(prop.table(table(dplyr::select(df_100k_train, Region), exclude = NULL)),
4) * 100
table_100k_test<-round(prop.table(table(dplyr::select(df_100k_test, Region), exclude = NULL)),
4) * 100
as.data.frame(table_1k)
as.data.frame(table_1k_train)
as.data.frame(table_1k_test)
as.data.frame(table_100k)
as.data.frame(table_100k_train)
as.data.frame(table_100k_test)
#build model via rpart package
model_100k <- rpart(Region ~ .,
method = "class",
data = df_100k_train,
control=rpart.control(minsplit=5, minbucket=5, cp=0.001)
)
#display decision tree
rpart.plot(model_100k)
#build model via rpart package
model_100k <- rpart(Region ~ .,
method = "class",
data = df_100k_train,
control=rpart.control(minsplit=1, minbucket=1, cp=0.001)
)
#display decision tree
rpart.plot(model_100k)
library(readr)
library(tidyverse)
library(tidymodels)
library(psych)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(labelled)
library(ggplot2)
library(ggforce)
library(kableExtra)
library(gridExtra)
url<-"https://raw.githubusercontent.com/GitableGabe/Data624_Data/main/"
df_1k <- read.csv(paste0(url,"1000%20Sales%20Records.csv"))
df_100k <- read.csv(paste0(url,"100000%20Sales%20Records.csv"))
str(df_1k)
str(df_100k)
kable(as.data.frame(table(df_1k$Region)) %>% arrange(desc(Freq)),
caption = "Frequency Region df_1k")
kable(as.data.frame(table(df_100k$Region)) %>% arrange(desc(Freq)),
caption = "Frequency Region df_100k")
kable(as.data.frame(table(df_1k$Item.Type )) %>% arrange(desc(Freq)),
caption = "Frequency Item.Type df_1k")
kable(as.data.frame(table(df_100k$Item.Type )) %>% arrange(desc(Freq)),
caption = "Frequency Item Type 100k")
kable(as.data.frame(table(df_1k$Sales.Channel )) %>% arrange(desc(Freq)),
caption = "Frequency Sales Channel 1k")
kable(as.data.frame(table(df_100k$Sales.Channel )) %>% arrange(desc(Freq)),
caption = "Frequency Sales Channel 100k")
# Dimensions
dim_1k_tmp<-dim(df_1k)
dim_100k_tmp<-dim(df_100k)
# Class
class_1k_tmp<-sapply(df_1k,class)
class_100k_tmp<-sapply(df_100k,class)
column_name_1k_tmp <- "Order.ID"
# Count the number of duplicates in the specified column
num_duplicates_1k_tmp <- sum(duplicated(df_1k[[column_name_1k_tmp]]) |
duplicated(df_1k[[column_name_1k_tmp]],
fromLast = TRUE))
column_name_100k_tmp <- "Order.ID"
# Count the number of duplicates in the specified column
num_duplicates_100k_tmp <- sum(duplicated(df_100k[[column_name_100k_tmp]]) |
duplicated(df_100k[[column_name_100k_tmp]],
fromLast = TRUE))
na_null_cnt_tmp<-(sum(colSums(is.na(df_1k) | is.null(df_1k)))+
sum(colSums(is.na(df_100k) | is.null(df_100k))))
region_tmp<-unique(df_1k$Region)
country_len_tmp<-length(unique(df_1k$Country))
df_1k[['Order.Date']] <- as.Date(df_1k[['Order.Date']], "%m/%d/%Y")
df_1k[['Ship.Date']] <- as.Date(df_1k[['Ship.Date']], "%m/%d/%Y")
df_100k[['Order.Date']] <- as.Date(df_100k[['Order.Date']], "%m/%d/%Y")
df_100k[['Ship.Date']] <- as.Date(df_100k[['Ship.Date']], "%m/%d/%Y")
df_1k[['Order.Priority']] <- as.factor(df_1k[['Order.Priority']])
df_100k[['Order.Priority']] <- as.factor(df_100k[['Order.Priority']])
df_1k[['Sales.Channel']] <- as.factor(df_1k[['Sales.Channel']])
df_100k[['Sales.Channel']] <- as.factor(df_100k[['Sales.Channel']])
df_1k[['Item.Type']] <- as.factor(df_1k[['Item.Type']])
df_100k[['Item.Type']] <- as.factor(df_100k[['Item.Type']])
df_1k[['Order.ID']] <- as.factor(df_1k[['Order.ID']])
df_100k[['Order.ID']] <- as.factor(df_100k[['Order.ID']])
df_1k[['Region']] <- as.factor(df_1k[['Region']])
df_100k[['Region']] <- as.factor(df_100k[['Region']])
levels(df_1k$Region)
describe(df_1k%>%
dplyr::select(contains("Unit") | contains("Total"))) %>%
dplyr::select(c(mean,sd,min,max,range,se,skew))
describe(df_100k%>%
dplyr::select(contains("Unit") | contains("Total"))) %>%
dplyr::select(c(mean,sd,min,max,range,se,skew))
plot_numeric_1k<-df_1k%>%
dplyr::select(contains("Unit") | contains("Total")) %>%
gather(variable, value, 1:6) %>%
ggplot(aes(value)) +
facet_wrap(~variable, scales = "free") +
geom_density(fill = "lightgreen", alpha=0.9, color="lightgreen") +
geom_histogram(aes(y=after_stat(density)), alpha=0.2, fill = "lightblue",
color="darkred", position="identity", bins = 40)
plot_numeric_100k<-df_100k%>%
dplyr::select(contains("Unit") | contains("Total")) %>%
gather(variable, value, 1:6) %>%
ggplot(aes(value)) +
facet_wrap(~variable, scales = "free") +
geom_density(fill = "lightgreen", alpha=0.9, color="lightgreen") +
geom_histogram(aes(y=after_stat(density)), alpha=0.2, fill = "lightblue",
color="darkred", position="identity", bins = 40)
grid.arrange(plot_numeric_1k,plot_numeric_100k,ncol=1)
par(mfrow = c(1, 2), mar = c(0, 0, 3, 0))
plot_corr_1k <- cor(df_1k %>%
dplyr::select(contains("Unit") | contains("Total")))
corrplot(plot_corr_1k, tl.col = 'darkgreen', diag = FALSE, type = "lower",
order = "hclust", addCoef.col = "darkgreen",
title = "1k",mar=c(0,0,1,0))
# Plot correlation for df_100k
plot_corr_100k <- cor(df_100k %>%
dplyr::select(contains("Unit") | contains("Total")))
corrplot(plot_corr_100k, tl.col = 'darkgreen', diag = FALSE, type = "lower",
order = "hclust", addCoef.col = "darkgreen",
title = "100k",mar=c(0,0,1,0))
df_1k2 <- df_1k %>%
# purrr::discard(is.numeric) %>%
select(-c(Country, Order.ID))
df_100k2 <- df_100k %>%
# purrr::discard(is.numeric) %>%
select(-c(Country, Order.ID))
#split into test/train set
#For df_1k
set.seed(2341)
sample_set <- sample(nrow(df_1k2), round(nrow(df_1k)*0.75), replace = FALSE)
df_1k_train <- df_1k2[sample_set, ]
df_1k_test <- df_1k2[-sample_set, ]
# For df_100k
sample_set <- sample(nrow(df_100k2), round(nrow(df_100k)*0.75), replace = FALSE)
df_100k_train <- df_100k2[sample_set, ]
df_100k_test <- df_100k2[-sample_set, ]
#check class distribution of original, train, and test sets
table_1k<-round(prop.table(table(dplyr::select(df_1k2, Region), exclude = NULL)),
4) * 100
table_1k_train<-round(prop.table(table(dplyr::select(df_1k_train , Region), exclude = NULL)),
4) * 100
table_1k_test<-round(prop.table(table(dplyr::select(df_1k_test, Region), exclude = NULL)),
4) * 100
table_100k<-round(prop.table(table(dplyr::select(df_100k2, Region), exclude = NULL)),
4) * 100
table_100k_train<-round(prop.table(table(dplyr::select(df_100k_train, Region), exclude = NULL)),
4) * 100
table_100k_test<-round(prop.table(table(dplyr::select(df_100k_test, Region), exclude = NULL)),
4) * 100
as.data.frame(table_1k)
as.data.frame(table_1k_train)
as.data.frame(table_1k_test)
as.data.frame(table_100k)
as.data.frame(table_100k_train)
as.data.frame(table_100k_test)
#build model via rpart package
model_100k <- rpart(Region ~ .,
method = "class",
data = df_100k_train,
control=rpart.control(minsplit=1, minbucket=1, cp=0.001)
)
#display decision tree
rpart.plot(model_100k)
View(df_100k2)
setwd("C:/Users/xusef/Documents/GitableGabe/Data624")
library(fpp3)
str(gafa_stock)
describe(gafa_stock)
unique(gafa_stock$Symbol)
ggplot(data = gafa_stock%>%
filter(Symbol="AMZN"), aes(x = Date, y = Close)) +
geom_line(color = "blue") +
labs(title = "Daily Closing Prices for Amazon Stock", x = "Date", y = "Closing Price") +
theme_minimal()
ggplot(data = gafa_stock%>%
filter(Symbol=="AMZN"), aes(x = Date, y = Close)) +
geom_line(color = "blue") +
labs(title = "Daily Closing Prices for Amazon Stock", x = "Date", y = "Closing Price") +
theme_minimal()
closing_plot1=ggplot(data = gafa_stock%>%
filter(Symbol=="AMZN"), aes(x = Date, y = Close)) +
geom_line(color = "blue") +
labs(title = "Daily Closing Prices for Amazon Stock", x = "Date", y = "Closing Price") +
theme_minimal()
ggtsdisplay(gafa_stock$Close, main = "Autocorrelation Function (ACF)")
library(fpp3)
library(ggfortify)
closing_plot1=ggplot(data = gafa_stock%>%
filter(Symbol=="AMZN"), aes(x = Date, y = Close)) +
geom_line(color = "blue") +
labs(title = "Daily Closing Prices for Amazon Stock", x = "Date", y = "Closing Price") +
theme_minimal()
ggtsdisplay(gafa_stock$Close, main = "Autocorrelation Function (ACF)")
library(fpp3)
library(ggfortify)
library(forecast)
