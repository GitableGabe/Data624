Mean = MEAN(Close),
`Naïve` = NAIVE(Close),
Drift = NAIVE(Close ~ drift())
)
# Produce forecasts for the trading days in January 2016
FB_jan_2016 <- FB_stock |>
filter(yearmonth(Date) == yearmonth("2016 Jan"))
FB_fc <- FB_fit |>
forecast(new_data = FB_jan_2016)
# Plot the forecasts
FB_fc |>
autoplot(FB_2015, level = NULL) +
autolayer(FB_jan_2016, Close, colour = "black") +
labs(y = "$US",
title = "Facebook daily closing stock prices",
subtitle = "(Jan 2015 - Jan 2016)") +
guides(colour = guide_legend(title = "Forecast"))
# Filter the year of interest
FB_2015 <- FB_stock %>% filter(year(Date) == 2015)
# Fit the models
FB_fit <- FB_2015 |>
model(
Drift = NAIVE(Close ~ drift())
)
# Produce forecasts for the trading days in January 2016
FB_jan_2016 <- FB_stock |>
filter(yearmonth(Date) == yearmonth("2016 Jan"))
FB_fc <- FB_fit |>
forecast(new_data = FB_jan_2016)
# Plot the forecasts
FB_fc |>
autoplot(FB_2015, level = NULL) +
autolayer(FB_jan_2016, Close, colour = "black") +
labs(y = "$US",
title = "Facebook daily closing stock prices",
subtitle = "(Jan 2015 - Jan 2016)") +
guides(colour = guide_legend(title = "Forecast"))
FB_2015%>%
autoplot(facebook_stock2, level = NULL) +
geom_line(data = slice(facebook_stock2, range(cumsum(!is.na(Close)))),
aes(y=Close), linetype = 'dashed')
FB_2015%>%
autoplot(FB_2015, level = NULL) +
geom_line(data = slice(FB_2015, range(cumsum(!is.na(Close)))),
aes(y=Close), linetype = 'dashed')
FB_fc%>%
autoplot(FB_2015, level = NULL) +
geom_line(data = slice(facebook_stock2, range(cumsum(!is.na(Close)))),
aes(y=Close), linetype = 'dashed')
FB_fc%>%
autoplot(FB_2015, level = NULL) +
geom_line(data = slice(FB_2015, range(cumsum(!is.na(Close)))),
aes(y=Close), linetype = 'dashed')
FB_fit2 <- FB_2015 %>%
model(
Mean = MEAN(Close),
Naive = NAIVE(Close)
)
# to make the forecasts for the trading days in January 2016
FB_jan_2016 <- FB_stock %>%
filter(yearmonth(Date) == yearmonth("2016 Jan"))
FB_fc2 <- FB_fit2 %>%
forecast(new_data = FB_jan_2016)
# Plotting
FB_forecast2 %>%
autoplot(FB_2015, level = NULL) +
autolayer(FB_jan_2016, Close, colour = "green") +
labs(y = "$USD",
title = "FB  Closing Stock Prices (Daily)",
subtitle = "(Jan 2015 - Jan 2016)") +
guides(colour = guide_legend(title = "The Forecast"))
FB_fit2 <- FB_2015 %>%
model(
Mean = MEAN(Close),
Naive = NAIVE(Close)
)
# to make the forecasts for the trading days in January 2016
FB_jan_2016 <- FB_stock %>%
filter(yearmonth(Date) == yearmonth("2016 Jan"))
FB_fc2 <- FB_fit2 %>%
forecast(new_data = FB_jan_2016)
# Plotting
FB_fc2 %>%
autoplot(FB_2015, level = NULL) +
autolayer(FB_jan_2016, Close, colour = "green") +
labs(y = "$USD",
title = "FB  Closing Stock Prices (Daily)",
subtitle = "(Jan 2015 - Jan 2016)") +
guides(colour = guide_legend(title = "The Forecast"))
# Extract data of interest
recent_production <- aus_production |>
filter(year(Quarter) >= 1992)
# Define and estimate a model
fit <- recent_production |> model(SNAIVE(Beer))
# Look at the residuals
fit |> gg_tsresiduals()
# Look a some forecasts
fit |> forecast() |> autoplot(recent_production)
# Define and estimate a model
df_aus_fit <- df_aus %>%
model(SNAIVE(Beer))
# Define and estimate a model
df_aus_fit <- df_aus %>%
model(SNAIVE(Exports))
# Look at the residuals
df_aus_fit %>%
gg_tsresiduals()
# Define and estimate a model
df_aus_fit <- df_aus %>%
model(SNAIVE(Exports))
# Look at the residuals
df_aus_fit %>%
gg_tsresiduals()
# Define and estimate a model
fit <- df_aus %>%
model(SNAIVE(Exports))
# Look at the residuals
fit %>%
gg_tsresiduals()
test <- global_economy %>%
filter(Country == "Australia")
# Define and estimate a model
fit <- test %>%
model(SNAIVE(Exports))
# Look at the residuals
fit %>%
gg_tsresiduals()
aus_exports <- global_economy %>%
filter(Country == "Australia")
# Define and estimate a model
fit <- aus_exports %>% model(NAIVE(Exports))
# Look at the residuals
fit %>% gg_tsresiduals() +
ggtitle("Residual Plots for Australian Exports")
# Look at some forecasts
fit %>% forecast() %>% autoplot(aus_exports) +
ggtitle("Annual Australian Exports")
#Box-Pierce test, ℓ=10 for non-seasonal data
fit %>%
augment() %>%
features(.innov, box_pierce, lag = 10, dof = 0)
library(dplyr)
library(stringr)
library(fpp3)
library(cowplot)
df_aus <- global_economy %>%
filter(Country == "Australia")
head(df_aus)
aus_plot1 <- df_aus%>%
autoplot(Population)+
labs(title= "Australian Population")+
annotate("text", x = Inf, y = -Inf, hjust = 1, vjust = -1,
label = "There is an upward trend")
aus_fit <- df_aus %>%
# no filter needed
model(RW(Population ~ drift()))
aus_fc <- aus_fit %>%
forecast(h = 10)
aus_plot2<- aus_fc %>%
autoplot(df_aus)
plot_grid(aus_plot1, aus_plot2, ncol = 2)
df_aus%>%
model(RW(Population ~ drift()))%>%
forecast(h = 10)%>%
autoplot(df_aus)
head(aus_production)
brick_plot1<-aus_production%>%
autoplot(Bricks)+
labs(title= "Bricks Production")+
annotate("text", x = Inf, y = -Inf, hjust = 1, vjust = -1,
label = "There is obvious seasonality but not trend")
brick_plot2<-aus_production%>%
# Warning: Removed 20 rows containing missing values (`geom_line()`).
# therefore filter is added
filter(!is.na(Bricks))%>%
model(SNAIVE(Bricks~lag("year")))%>%
forecast(h = 10)%>%
autoplot(aus_production)+
# aus_production added twice to ensure visual has full plot
labs(title= "Bricks Production Forecast")
plot_grid(brick_plot1,brick_plot2, ncol = 1)
cat(paste(unique(aus_livestock$State), collapse = "\n"))
df_lambs<-aus_livestock%>%
filter(State == "New South Wales", str_detect(Animal,"Lambs"))
head(df_lambs)
lambs_plot1 <- df_lambs%>%
autoplot()+
labs(title= "New South Wales Count")+
annotate("text", x = Inf, y = -Inf, hjust = 1, vjust = -1,
label = "There is no obvious seasonality or trend")
lambs_plot2<-df_lambs%>%
model(NAIVE(Count))%>%
forecast(h = 10)%>%
autoplot(df_lambs)+
labs(title= "New South Wales Forecast")
lambs_plot1
lambs_plot2
head(hh_budget)
wealth_plot1<-hh_budget%>%
autoplot(Wealth, show.legend= FALSE)+
facet_grid(Country~., scales = "free", space = "free_y")
wealth_plot2<- hh_budget%>%
model(RW(Wealth~drift()))%>%
forecast(h=5)%>%
autoplot(hh_budget)
wealth_plot1
wealth_plot2
cat(paste(unique(aus_retail$State), collapse = "\n"))
head(aus_retail)
aus_retail%>%
filter(str_detect(Industry,"takeaway"))%>%
autoplot(Turnover)+
scale_color_discrete(name = "State", labels = unique(aus_retail$State))+
labs(title = "Turnover (Australian takeaway) by State")
aus_retail %>%
filter(str_detect(Industry,"takeaway")) %>%
model(RW(Turnover ~ drift())) %>%
forecast(h = 10) %>%
autoplot(aus_retail)+
facet_wrap(~State, scales = "free")
cat(paste(unique(gafa_stock$Symbol), collapse = "\n"))
distinct(gafa_stock, year = lubridate::year(Date))
df_fb <- gafa_stock %>%
filter(Symbol == "FB")
head(df_fb)
# Re-index based on trading days
FB_stock <- df_fb %>%
# already filtered
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
FB_stock%>%
autoplot(Close)+
labs(y = '$US', title = 'The Facebook Daily Closing Stock Price')
# Filter the year of interest
FB_2015 <- FB_stock %>% filter(year(Date) == 2015)
# Fit the models
FB_fit <- FB_2015 |>
model(
Drift = NAIVE(Close ~ drift())
)
# Produce forecasts for the trading days in January 2016
FB_jan_2016 <- FB_stock |>
filter(yearmonth(Date) == yearmonth("2016 Jan"))
FB_fc <- FB_fit |>
forecast(new_data = FB_jan_2016)
# Plot the forecasts
FB_fc |>
autoplot(FB_2015, level = NULL) +
autolayer(FB_jan_2016, Close, colour = "black") +
labs(y = "$US",
title = "Facebook daily closing stock prices",
subtitle = "(Jan 2015 - Jan 2016)") +
guides(colour = guide_legend(title = "Forecast"))
FB_fc%>%
autoplot(FB_2015, level = NULL) +
geom_line(data = slice(FB_2015, range(cumsum(!is.na(Close)))),
aes(y=Close), linetype = 'dashed')
FB_fit2 <- FB_2015 %>%
model(
Mean = MEAN(Close),
Naive = NAIVE(Close)
)
# to make the forecasts for the trading days in January 2016
FB_jan_2016 <- FB_stock %>%
filter(yearmonth(Date) == yearmonth("2016 Jan"))
FB_fc2 <- FB_fit2 %>%
forecast(new_data = FB_jan_2016)
# Plotting
FB_fc2 %>%
autoplot(FB_2015, level = NULL) +
autolayer(FB_jan_2016, Close, colour = "green") +
labs(y = "$USD",
title = "FB  Closing Stock Prices (Daily)",
subtitle = "(Jan 2015 - Jan 2016)") +
guides(colour = guide_legend(title = "The Forecast"))
# Extract data of interest
recent_production <- aus_production |>
filter(year(Quarter) >= 1992)
# Define and estimate a model
fit <- recent_production |> model(SNAIVE(Beer))
# Look at the residuals
fit |> gg_tsresiduals()
# Look a some forecasts
fit |> forecast() |> autoplot(recent_production)
# aus_exports <- global_economy %>%
#   filter(Country == "Australia")
# Define and estimate a model
fit <- df_aus %>% model(NAIVE(Exports))
# Look at the residuals
fit %>% gg_tsresiduals() +
ggtitle("Residual Plots for Australian Exports")
# Look at some forecasts
fit %>% forecast() %>% autoplot(aus_exports) +
ggtitle("Annual Australian Exports")
# aus_exports <- global_economy %>%
#   filter(Country == "Australia")
# Define and estimate a model
fit <- df_aus %>% model(NAIVE(Exports))
# Look at the residuals
fit %>% gg_tsresiduals() +
ggtitle("Residual Plots for Australian Exports")
# Look at some forecasts
fit %>% forecast() %>% autoplot(df_aus) +
ggtitle("Annual Australian Exports")
#Box-Pierce test, ℓ=10 for non-seasonal data
fit %>%
augment() %>%
features(.innov, box_pierce, lag = 10, dof = 0)
# Define and estimate a model
df_aus_fit <- df_aus %>%
model(NAIVE(Exports))
library(dplyr)
library(stringr)
library(fpp3)
library(cowplot)
df_aus <- global_economy %>%
filter(Country == "Australia")
head(df_aus)
aus_plot1 <- df_aus%>%
autoplot(Population)+
labs(title= "Australian Population")+
annotate("text", x = Inf, y = -Inf, hjust = 1, vjust = -1,
label = "There is an upward trend")
aus_fit <- df_aus %>%
# no filter needed
model(RW(Population ~ drift()))
aus_fc <- aus_fit %>%
forecast(h = 10)
aus_plot2<- aus_fc %>%
autoplot(df_aus)
plot_grid(aus_plot1, aus_plot2, ncol = 2)
df_aus%>%
model(RW(Population ~ drift()))%>%
forecast(h = 10)%>%
autoplot(df_aus)
head(aus_production)
brick_plot1<-aus_production%>%
autoplot(Bricks)+
labs(title= "Bricks Production")+
annotate("text", x = Inf, y = -Inf, hjust = 1, vjust = -1,
label = "There is obvious seasonality but not trend")
brick_plot2<-aus_production%>%
# Warning: Removed 20 rows containing missing values (`geom_line()`).
# therefore filter is added
filter(!is.na(Bricks))%>%
model(SNAIVE(Bricks~lag("year")))%>%
forecast(h = 10)%>%
autoplot(aus_production)+
# aus_production added twice to ensure visual has full plot
labs(title= "Bricks Production Forecast")
plot_grid(brick_plot1,brick_plot2, ncol = 1)
cat(paste(unique(aus_livestock$State), collapse = "\n"))
df_lambs<-aus_livestock%>%
filter(State == "New South Wales", str_detect(Animal,"Lambs"))
head(df_lambs)
lambs_plot1 <- df_lambs%>%
autoplot()+
labs(title= "New South Wales Count")+
annotate("text", x = Inf, y = -Inf, hjust = 1, vjust = -1,
label = "There is no obvious seasonality or trend")
lambs_plot2<-df_lambs%>%
model(NAIVE(Count))%>%
forecast(h = 10)%>%
autoplot(df_lambs)+
labs(title= "New South Wales Forecast")
lambs_plot1
lambs_plot2
head(hh_budget)
wealth_plot1<-hh_budget%>%
autoplot(Wealth, show.legend= FALSE)+
facet_grid(Country~., scales = "free", space = "free_y")
wealth_plot2<- hh_budget%>%
model(RW(Wealth~drift()))%>%
forecast(h=5)%>%
autoplot(hh_budget)
wealth_plot1
wealth_plot2
cat(paste(unique(aus_retail$State), collapse = "\n"))
head(aus_retail)
aus_retail%>%
filter(str_detect(Industry,"takeaway"))%>%
autoplot(Turnover)+
scale_color_discrete(name = "State", labels = unique(aus_retail$State))+
labs(title = "Turnover (Australian takeaway) by State")
aus_retail %>%
filter(str_detect(Industry,"takeaway")) %>%
model(RW(Turnover ~ drift())) %>%
forecast(h = 10) %>%
autoplot(aus_retail)+
facet_wrap(~State, scales = "free")
cat(paste(unique(gafa_stock$Symbol), collapse = "\n"))
distinct(gafa_stock, year = lubridate::year(Date))
df_fb <- gafa_stock %>%
filter(Symbol == "FB")
head(df_fb)
# Re-index based on trading days
FB_stock <- df_fb %>%
# already filtered
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
FB_stock%>%
autoplot(Close)+
labs(y = '$US', title = 'The Facebook Daily Closing Stock Price')
# Filter the year of interest
FB_2015 <- FB_stock %>% filter(year(Date) == 2015)
# Fit the models
FB_fit <- FB_2015 |>
model(
Drift = NAIVE(Close ~ drift())
)
# Produce forecasts for the trading days in January 2016
FB_jan_2016 <- FB_stock |>
filter(yearmonth(Date) == yearmonth("2016 Jan"))
FB_fc <- FB_fit |>
forecast(new_data = FB_jan_2016)
# Plot the forecasts
FB_fc |>
autoplot(FB_2015, level = NULL) +
autolayer(FB_jan_2016, Close, colour = "black") +
labs(y = "$US",
title = "Facebook daily closing stock prices",
subtitle = "(Jan 2015 - Jan 2016)") +
guides(colour = guide_legend(title = "Forecast"))
FB_fc%>%
autoplot(FB_2015, level = NULL) +
geom_line(data = slice(FB_2015, range(cumsum(!is.na(Close)))),
aes(y=Close), linetype = 'dashed')
FB_fit2 <- FB_2015 %>%
model(
Mean = MEAN(Close),
Naive = NAIVE(Close)
)
# to make the forecasts for the trading days in January 2016
FB_jan_2016 <- FB_stock %>%
filter(yearmonth(Date) == yearmonth("2016 Jan"))
FB_fc2 <- FB_fit2 %>%
forecast(new_data = FB_jan_2016)
# Plotting
FB_fc2 %>%
autoplot(FB_2015, level = NULL) +
autolayer(FB_jan_2016, Close, colour = "green") +
labs(y = "$USD",
title = "FB  Closing Stock Prices (Daily)",
subtitle = "(Jan 2015 - Jan 2016)") +
guides(colour = guide_legend(title = "The Forecast"))
# Extract data of interest
recent_production <- aus_production |>
filter(year(Quarter) >= 1992)
# Define and estimate a model
fit <- recent_production |> model(SNAIVE(Beer))
# Look at the residuals
fit |> gg_tsresiduals()
# Look a some forecasts
fit |> forecast() |> autoplot(recent_production)
# Define and estimate a model
df_aus_fit <- df_aus %>%
model(NAIVE(Exports))
# Look at the residuals
df_aus_fit %>%
gg_tsresiduals()
# Look at some forecasts
df_aus_fit %>%
forecast() %>% autoplot(df_aus)
#Box-Pierce test, ℓ=10 for non-seasonal data
df_aus_fit %>%
augment() %>%
features(.innov, box_pierce, lag = 10, dof = 0)
# Define and estimate a model
df_aus_fit <- df_aus %>%
model(NAIVE(Exports))
# Look at the residuals
df_aus_fit %>%
gg_tsresiduals()
# Look at some forecasts
df_aus_fit %>%
forecast() %>% autoplot(df_aus)
aus_aug<-df_aus_fit%>%
augment()
autoplot(aus_aug, .innov)
aus_aug<-df_aus_fit%>%
augment()
aus_aug |> features(.innov, box_pierce, lag = 10)
aus_aug |> features(.innov, ljung_box, lag = 10)
# Define and estimate a model
aus_prod_fit <- aus_production %>%
model(NAIVE(Bricks))
# Look at the residuals
aus_prod_fit %>%
gg_tsresiduals()
# Look at some forecasts
aus_prod_fit %>%
forecast() %>% autoplot(aus_production)
aus_prod_aug<-aus_prod_fit%>%
augment()
aus_prod_aug |> features(.innov, box_pierce, lag = 10)
aus_prod_aug |> features(.innov, ljung_box, lag = 10)
set.seed(123)
myseries <- aus_retail %>%
filter(`Series ID` == sample(aus_retail$`Series ID`,1))
myseries_train <- myseries |>
filter(year(Month) < 2011)
autoplot(myseries, Turnover) +
autolayer(myseries_train, Turnover, colour = "red")
fit <- myseries_train |>
model(SNAIVE(Turnover))
fit |> gg_tsresiduals()
fc <- fit |>
forecast(new_data = anti_join(myseries, myseries_train))
fc |> autoplot(myseries)
fit |> accuracy()
fc |> accuracy(myseries)
update.packages(ask = FALSE, checkBuilt = TRUE)
