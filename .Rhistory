library(MASS)
library(gridExtra)
library(psych)
library(skimr)
library(caret)
git_url<-
"https://raw.githubusercontent.com/GitableGabe/Data621_Data/main/"
df_hate_crime <-
read.csv(paste0(git_url,"hate_crime.csv"))
head(df_hate_crime,n=3)
summary(df_hate_crime)
print(skim(df_hate_crime))
df_hate_crime%>%
dplyr::select(-c(adult_victim_count,juvenile_victim_count,adult_offender_count,juvenile_offender_count,total_individual_victims,incident_date))
# add binary column to each dataset
df_hate_crime <- df_hate_crime %>%
mutate(Anti_semitic_crimes = ifelse(grepl("Anti-Jewish",
bias_desc, ignore.case = TRUE), 1, 0))
# df_hate_crime <- df_hate_crime %>%
#   mutate(Violent = ifelse(grepl("*Assault*|*Abduction*|*Rape*|*Kidnapping*|*Murder*",
#                                      offense_name, ignore.case = TRUE), 1, 0))
# get counts
cnt_hate <- sum(df_hate_crime$Anti_semitic == 1)
total_hate<-nrow(df_hate_crime)
cat("Number of Anti_semitic column reports in hatecrime.csv is:",
cnt_hate," out of ",total_hate,"\n")
df_hate_corr <- df_hate_crime
# frequency_map <- table(df_hate_crime$incident_id)
# df_hate_crime$incident_id_freq <- frequency_map[df_hate_crime$incident_id]
add_freq <- function(data, column_name) {
# Compute frequencies, including NAs
frequency_map <- table(data[[column_name]], useNA = "always")
# Create a new column with frequency encoding (including NAs)
new_col_name <- paste0(column_name, "_freq")
data[[new_col_name]] <- frequency_map[match(data[[column_name]], names(frequency_map))]
return(data)
}
# Loop through all columns and add frequency encoding columns (including NAs)
for (col in names(df_hate_corr)) {
df_hate_corr <- add_freq(df_hate_corr, col)
}
test<-df_hate_corr%>%
dplyr::select(matches("_freq", matches("^Anti")))
View(test)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(GGally)
library(Hmisc)
library(corrplot)
library(PerformanceAnalytics)
library(scales)
library(MASS)
library(gridExtra)
library(psych)
library(skimr)
library(caret)
git_url<-
"https://raw.githubusercontent.com/GitableGabe/Data621_Data/main/"
df_hate_crime <-
read.csv(paste0(git_url,"hate_crime.csv"))
head(df_hate_crime,n=3)
summary(df_hate_crime)
print(skim(df_hate_crime))
df_hate_crime%>%
dplyr::select(-c(adult_victim_count,juvenile_victim_count,adult_offender_count,juvenile_offender_count,total_individual_victims,incident_date))
# add binary column to each dataset
df_hate_crime <- df_hate_crime %>%
mutate(Anti_semitic_crimes = ifelse(grepl("Anti-Jewish",
bias_desc, ignore.case = TRUE), 1, 0))
# df_hate_crime <- df_hate_crime %>%
#   mutate(Violent = ifelse(grepl("*Assault*|*Abduction*|*Rape*|*Kidnapping*|*Murder*",
#                                      offense_name, ignore.case = TRUE), 1, 0))
# get counts
cnt_hate <- sum(df_hate_crime$Anti_semitic == 1)
total_hate<-nrow(df_hate_crime)
cat("Number of Anti_semitic column reports in hatecrime.csv is:",
cnt_hate," out of ",total_hate,"\n")
df_hate_corr <- df_hate_crime
# frequency_map <- table(df_hate_crime$incident_id)
# df_hate_crime$incident_id_freq <- frequency_map[df_hate_crime$incident_id]
add_freq <- function(data, column_name) {
# Compute frequencies, including NAs
frequency_map <- table(data[[column_name]], useNA = "always")
# Create a new column with frequency encoding (including NAs)
new_col_name <- paste0(column_name, "_freq")
data[[new_col_name]] <- frequency_map[match(data[[column_name]], names(frequency_map))]
return(data)
}
# Loop through all columns and add frequency encoding columns (including NAs)
for (col in names(df_hate_corr)) {
df_hate_corr <- add_freq(df_hate_corr, col)
}
test<-df_hate_corr%>%
dplyr::select(matches("_freq"), matches("^Anti")))
df_hate_corr <- df_hate_crime
# frequency_map <- table(df_hate_crime$incident_id)
# df_hate_crime$incident_id_freq <- frequency_map[df_hate_crime$incident_id]
add_freq <- function(data, column_name) {
# Compute frequencies, including NAs
frequency_map <- table(data[[column_name]], useNA = "always")
# Create a new column with frequency encoding (including NAs)
new_col_name <- paste0(column_name, "_freq")
data[[new_col_name]] <- frequency_map[match(data[[column_name]], names(frequency_map))]
return(data)
}
# Loop through all columns and add frequency encoding columns (including NAs)
for (col in names(df_hate_corr)) {
df_hate_corr <- add_freq(df_hate_corr, col)
}
test<-df_hate_corr%>%
dplyr::select(matches("_freq"), matches("^Anti"))
View(test)
setwd("~/GitableGabe/Data624")
url<-"https://raw.githubusercontent.com/GitableGabe/Data624_Data/main/"
csv_file<-"tute1.csv"
tute1_csv<-url+csv_file
url<-"https://raw.githubusercontent.com/GitableGabe/Data624_Data/main/"
csv_file<-"tute1.csv"
tute1_csv<-paste(url,csv_file)
tute1 <- read.csv(tute1_csv, header=TRUE)
url<-"https://raw.githubusercontent.com/GitableGabe/Data624_Data/main/"
csv_file<-"tute1.csv"
tute1_csv<-paste(url,csv_file, sep="")
tute1 <- read.csv(tute1_csv, header=TRUE)
tute1 <- read.csv(tute1_csv, header=TRUE)
View(tute1)
tute1 <- read.csv(tute1_csv, header=TRUE)
head(tute1,10)
mytimeseries <- ts(tute1[,-1], start=1981, frequency=4)
autoplot(mytimeseries, facets=TRUE)
library(ggplot2)
library(ggplot2)
autoplot(mytimeseries, facets=TRUE)
library('ggplot2')
autoplot(mytimeseries, facets=TRUE)
library('ggplot2')
url<-"https://raw.githubusercontent.com/GitableGabe/Data624_Data/main/"
csv_file<-"tute1.csv"
tute1_csv<-paste(url,csv_file, sep="")
tute1 <- read.csv(tute1_csv, header=TRUE)
head(tute1,10)
mytimeseries <- ts(tute1[,-1], start=1981, frequency=4)
autoplot(mytimeseries, facets=TRUE)
ggplot2::autoplot(mytimeseries, facets=TRUE)
library('ggplot2')
library('forecast')
install.packages('forecast')
library('ggplot2')
library('forecast')
library('ggplot2')
library('forecast')
library('quantmod')
autoplot(mytimeseries, facets=TRUE)
autoplot(mytimeseries)
help(gold)
autoplot(gold)
autoplot(woolyrnq)
autoplot(gas)
gld_frq<-frequency(gold)
autoplot(gold)+
ggtitle(paste("Gold Time Series | Frequency",gld_frq))
gld_frq<-frequency(gold)
gld_max<-which.max(gold)
autoplot(gold)+
ggtitle(paste("Gold Time Series | Frequency:",gld_frq))+
annotate("text", x = gld_max, y = gold[gld_max],
label = paste("Max at index", gld_max), vjust = -0.5)
wlyrnq_frq<-frequency(woolyrnq)
wlyrnq_max<-which.max(woolyrnq)
autoplot(woolyrnq)+
ggtitle(paste("Woolyrnq Time Series | Frequency:",wlyrnq_frq))+
annotate("text", x = wlyrnq_max, y = woolyrnq[wlyrnq_max],
label = paste("Max at index", wlyrnq_max), vjust = -0.5)
autoplot(woolyrnq)
wlyrnq_frq<-frequency(woolyrnq)
wlyrnq_max<-which.max(woolyrnq)
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))+
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))+
annotate("text")
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))+
annotate("text", x = gld_max, y = gold[gld_max],
label = paste("Max at index", gld_max))
wlyrnq_frq<-frequency(woolyrnq)
wlyrnq_max<-which.max(woolyrnq)
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))+
annotate("text", x = wlyrnq_max, y = woolyrnq[wlyrnq_max],
label = paste("Max at index", wlyrnq_max))
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))+
annotate("text", x = wlyrnq_max,
label = paste("Max at index", wlyrnq_max))
wlyrnq_frq<-frequency(woolyrnq)
wlyrnq_max<-which.max(woolyrnq)
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))+
annotate("text", x = wlyrnq_max, y = woolyrnq[wlyrnq_max],
label = paste("Max at index", wlyrnq_max))
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))
help("woolyrnq")
wlyrnq_frq<-frequency(woolyrnq)
wlyrnq_max<-which.max(woolyrnq)
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))+
annotate("text", x = wlyrnq_max, y = woolyrnq[wlyrnq_max],
label = paste("Max at index", wlyrnq_max), vjust = -0.5) +
theme_minimal()
# Use autoplot with the frequency and max index information in the title
autoplot(woolyrnq, main = paste("Woolyrnq Time Series | Frequency =", freq)) +
annotate("text", x = max_index, y = woolyrnq[max_index],
label = paste("Max at index", max_index), vjust = -0.5) +
theme_minimal()
freq <- frequency(woolyrnq)
# Find the index of the maximum value
max_index <- which.max(woolyrnq)
# Use autoplot with the frequency and max index information in the title
autoplot(woolyrnq, main = paste("Woolyrnq Time Series | Frequency =", freq)) +
annotate("text", x = max_index, y = woolyrnq[max_index],
label = paste("Max at index", max_index), vjust = -0.5) +
theme_minimal()
freq <- frequency(woolyrnq)
# Find the index of the maximum value
max_index <- which.max(woolyrnq)
xlim <- c(1, length(woolyrnq))
# Use autoplot with the frequency and max index information in the title
autoplot(woolyrnq, main = paste("Woolyrnq Time Series | Frequency =", freq)) +
annotate("text", x = max_index, y = woolyrnq[max_index],
label = paste("Max at index", max_index), vjust = -0.5) +
theme_minimal()
wlyrnq_frq<-frequency(woolyrnq)
wlyrnq_max<-which.max(woolyrnq)
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))
# Assuming 'woolyrnq' is your time series object
# Extract the frequency of the time series
freq <- frequency(woolyrnq)
# Find the index and value of the maximum value
max_index <- which.max(woolyrnq)
max_value <- woolyrnq[max_index]
# Use autoplot with the frequency and max index information in the title
autoplot(woolyrnq, main = paste("Woolyrnq Time Series | Frequency =", freq)) +
geom_text(aes(x = max_index, y = max_value, label = paste("Max at index", max_index)), vjust = -0.5) +
theme_minimal()
# Assuming 'woolyrnq' is your time series object
# Extract the frequency of the time series
freq <- frequency(woolyrnq)
# Find the index and value of the maximum value
max_index <- which.max(woolyrnq)
max_value <- woolyrnq[max_index]
# Calculate the x-axis limits for better visibility
x_range <- range(1, length(woolyrnq))
# Use autoplot with the frequency, max index, and adjusted x-axis limits
autoplot(woolyrnq, main = paste("Woolyrnq Time Series | Frequency =", freq), xlim = x_range) +
geom_text(aes(x = max_index, y = max_value, label = paste("Max at index", max_index)),
vjust = -0.5, hjust = -0.5) +
theme_minimal()
wlyrnq_frq<-frequency(woolyrnq)
wlyrnq_max<-which.max(woolyrnq)
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq))
wlyrnq_frq<-frequency(woolyrnq)
wlyrnq_max<-which.max(woolyrnq)
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq," | Max at: ",wlyrnq_max))
library('ggplot2')
library('forecast')
library('quantmod')
gld_frq<-frequency(gold)
gld_max<-which.max(gold)
autoplot(gold)+
ggtitle(paste("Gold Time Series | Frequency:",gld_frq))+
annotate("text", x = gld_max, y = gold[gld_max],
label = paste("Max at index", gld_max), vjust = -0.5)
help(woolyrnq)
wlyrnq_frq<-frequency(woolyrnq)
wlyrnq_max<-which.max(woolyrnq)
autoplot(woolyrnq)+
ggtitle(paste("Wollyrnq Time Series | Frequency:",wlyrnq_frq," | Max at: ",wlyrnq_max))
# help(woolyrnq)
head(woolyrnq)
# help(woolyrnq)
head(woolyrnq,30)
# Extract the frequency of the time series
freq <- 4  # Quarterly data
# Find the index of the maximum value
max_index <- which.max(woolyrnq)
# Use autoplot with the frequency and max index information in the title
autoplot(ts(woolyrnq, frequency = freq)) +
ggtitle(paste("Woolyrnq Time Series Plot | Frequency =", freq)) +
annotate("text", x = max_index, y = woolyrnq[max_index],
label = paste("Max at index", max_index), vjust = -0.5)
wlyrnq_freq <- frequency(woolyrnq)
wlyrnq_max <- which.max(woolyrnq)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(woolyrnq, frequency = wlyrnq_freq)) +
ggtitle(paste("Woolyrnq Time Series Plot | Frequency =", wlyrnq_freq)) +
annotate("text", x = wlyrnq_max, y = woolyrnq[wlyrnq_max],
label = paste("Max at index", wlyrnq_max), vjust = -0.5)
wlyrnq_freq <- frequency(woolyrnq)
wlyrnq_max <- which.max(woolyrnq)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(woolyrnq, frequency = wlyrnq_freq)) +
ggtitle(paste("Woolyrnq Time Series Plot | Frequency =", wlyrnq_freq)) +
ylab("Woolyrn (quarterly)") +
annotate("text", x = wlyrnq_max, y = woolyrnq[wlyrnq_max],
label = paste("Max at index", wlyrnq_max), vjust = -0.5)
wlyrnq_freq <- frequency(woolyrnq)
wlyrnq_max <- which.max(woolyrnq)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(woolyrnq, frequency = wlyrnq_freq)) +
ggtitle(paste("woolyrnq Time Series Plot | Frequency =", wlyrnq_freq)) +
ylab("woolyrn (quarterly)") +
annotate("text", x = wlyrnq_max, y = woolyrnq[wlyrnq_max],
label = paste("Max at index", wlyrnq_max), vjust = -0.5)
#help(gas)
head(gas,30)
#autoplot(gas)
gas_freq <- frequency(gas)
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq)) +
ylab("gas (monthly)") +
annotate("text", x = gas_max, y = gas[gas_max],
label = paste("Max at index", gas_max), vjust = -0.5)
help(gas)
#autoplot(gas)
gas_freq <- 52
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq)) +
ylab("gas (monthly)") +
annotate("text", x = gas_max, y = gas[gas_max],
label = paste("Max at index", gas_max), vjust = -0.5)
#autoplot(gas)
gas_freq <- 12
#autoplot(gas)
gas_freq <- 12
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq)) +
ylab("gas (monthly)") +
annotate("text", x = gas_max, y = gas[gas_max],
label = paste("Max at index", gas_max), vjust = -0.5)
#autoplot(gas)
gas_freq <- 4
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq)) +
ylab("gas (monthly)") +
annotate("text", x = gas_max, y = gas[gas_max],
label = paste("Max at index", gas_max), vjust = -0.5)
#autoplot(gas)
gas_freq <- 1
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq)) +
ylab("gas (monthly)") +
annotate("text", x = gas_max, y = gas[gas_max],
label = paste("Max at index", gas_max), vjust = -0.5)
#autoplot(gas)
gas_freq <- 4
#autoplot(gas)
gas_freq <- 4
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq)) +
ylab("gas (monthly)") +
annotate("text", x = gas_max, y = gas[gas_max],
label = paste("Max at index", gas_max), vjust = -0.5)
#autoplot(gas)
gas_freq <- 4
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq)) +
ylab("gas (monthly)") +
annotate("text", x = gas_max, y = gas[gas_max],
label = paste("Max at index", gas_max))
#autoplot(gas)
gas_freq <- 12
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq)) +
ylab("gas (monthly)") +
annotate("text", x = gas_max, y = gas[gas_max],
label = paste("Max at index", gas_max))
#autoplot(gas)
gas_freq <- 1
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq)) +
ylab("gas (monthly)") +
annotate("text", x = gas_max, y = gas[gas_max],
label = paste("Max at index", gas_max))
#help(gas)
head(gas,100)
# Extract the frequency of the time series
freq <- 12  # Monthly data
# Create a time series object with row names as time index
ts_data <- ts(data[, -1], frequency = freq, start = as.numeric(rownames(data)))
# Extract the frequency of the time series
freq <- 12  # Monthly data
# Create a time series object with row names as time index
ts_data <- ts(gas[, -1], frequency = freq, start = as.numeric(rownames(data)))
# Extract the frequency of the time series
freq <- 12  # Monthly data
# Create a time series object with row names as time index
ts_data <- ts(gas[, -1], frequency = freq, start = as.numeric(rownames(gas)))
# Extract the frequency of the time series
freq <- 12  # Monthly data
# Convert data to matrix
gas_matrix <- as.matrix(gas[, -1])
# Extract the frequency of the time series
freq <- 12  # Monthly data
# Convert data to matrix
gas_matrix <- as.matrix(gas)
# Create a time series object with row names as time index
ts_gas <- ts(gas_matrix, frequency = freq, start = as.numeric(rownames(gas)))
# Use autoplot with the frequency and max index information in the title
autoplot(ts_gas) +
ggtitle(paste("Gas Time Series Plot | Frequency =", freq)) +
ylab("Gas (monthly)") +  # Y-axis label
annotate("text", x = max_index, y = gas_matrix[max_index],
label = paste("Max at index", max_index), vjust = -0.5)
# Extract the frequency of the time series
freq <- 12  # Monthly data
# Convert data to matrix
gas_matrix <- as.matrix(gas)
# Create a time series object with row names as time index
ts_gas <- ts(gas_matrix, frequency = freq, start = c(as.numeric(rownames(gas))[1], 1), end = c(as.numeric(rownames(gas))[nrow(gas)], 12))
# Extract the frequency of the time series
freq <- 12  # Monthly data
# Convert row names to numeric
row_names_numeric <- as.numeric(rownames(gas))
# Convert data to matrix
gas_matrix <- as.matrix(gas)
# Create a time series object with row names as time index
ts_gas <- ts(gas_matrix, frequency = freq, start = c(row_names_numeric[1], 1), end = c(row_names_numeric[nrow(gas)], 12))
#autoplot(gas)
gas_freq <- 12
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq))
#autoplot(gas)
gas_freq <- frequency(gas)
gas_max <- which.max(gas)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(gas, frequency = gas_freq)) +
ggtitle(paste("gas Time Series Plot | Frequency =", gas_freq))
wlyrnq_freq <- frequency(woolyrnq)
wlyrnq_max <- which.max(woolyrnq)
test <- woolyrnq %>%
filter(Close == max(Close))
wlyrnq_freq <- frequency(woolyrnq)
wlyrnq_max <- which.max(woolyrnq)
test <- woolyrnq%>%
filter(Close == max(Close))
wlyrnq_freq <- frequency(woolyrnq)
wlyrnq_max <- which.max(woolyrnq)
test <- woolyrnq
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(woolyrnq, frequency = wlyrnq_freq)) +
ggtitle(paste("woolyrnq Time Series Plot | Frequency =", wlyrnq_freq," ")) +
ylab("woolyrn (quarterly)") +
annotate("text", x = wlyrnq_max, y = woolyrnq[wlyrnq_max],
label = paste("Max at index", wlyrnq_max), vjust = -0.5)
wlyrnq_freq <- frequency(woolyrnq)
wlyrnq_max <- which.max(woolyrnq)
test <- woolyrnq
test<-test%>%
filter(Close == max(Close))
wlyrnq_freq <- frequency(woolyrnq)
wlyrnq_max <- which.max(woolyrnq)
# use ts() b/c data as per Forecasting: Principles and Practice 2.1 ts object
# e.g. y <- ts(z, start=2003, frequency=12)
autoplot(ts(woolyrnq, frequency = wlyrnq_freq)) +
ggtitle(paste("woolyrnq Time Series Plot | Frequency =", wlyrnq_freq," ")) +
ylab("woolyrn (quarterly)") +
annotate("text", x = wlyrnq_max, y = woolyrnq[wlyrnq_max],
label = paste("Outlier at index", wlyrnq_max), vjust = -0.5)
