library(RANN)
library(tidyr)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
model1 <- randomForest(y ~ ., data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
# order(-rfImp1)
rfImp1
model1 <- randomForest(y ~ ., data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
order(-rfImp1)
# order(-rfImp1)
order(rfImp1$Overall)
# order(-rfImp1)
(order(rfImp1$Overall))
# order(-rfImp1)
ordered_importance <- rfImp1$importance[order(-rfImp1$importance[, 1]),]
# order(-rfImp1)
ordered_importance <- rfImp1$Overall[order(-rfImp1$Overall[, 1]),]
View(simulated)
```{r message=FALSE, warning=FALSE}
library(randomForest)
library(caret)
model1 <- randomForest(y ~ ., data = simulated, importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
order(-rfImp1)
```{r message=FALSE, warning=FALSE}
library(randomForest)
library(caret)
model1 <- randomForest(y ~ ., data = simulated, importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
order(-rfImp1)
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(earth)
library(fpp3)
library(dplyr)
library(ggplot2)
library(mlbench)
library(randomForest)
library(RANN)
library(tidyr)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
model1 <- randomForest(y ~ ., data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
rfImp1
simulated$duplicate1 <- simulated$V1 + rnorm(200) * .1
cor(simulated$duplicate1, simulated$V1)
simulated2<-simulated
model2 <- randomForest(y ~ ., data = simulated2, importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
order(-rfImp2)
model2 <- randomForest(y ~ ., data = simulated2, importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
rfImp2
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(earth)
library(fpp3)
library(dplyr)
library(ggplot2)
library(mlbench)
library(randomForest)
library(RANN)
library(tidyr)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
model1 <- randomForest(y ~ ., data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
rfImp1
simulated$duplicate1 <- simulated$V1 + rnorm(200) * .1
cor(simulated$duplicate1, simulated$V1)
simulated2<-simulated
simulated2$duplicate1 <- simulated2$V1 + rnorm(200) * .1
cor(simulated2$duplicate1, simulated2$V1)
model2 <- randomForest(y ~ ., data = simulated2, importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
rfImp2
View(rfImp1)
order(rfImp1$Overall)
rfImp1
order(rfImp1$Overall)
order(rfImp1$Overall[,1])
order(rfImp1[,1])
order(rfImp1[,2])
order(rfImp1[,1])
rfImp1[order(rfImp1$Overall), ]
test<-rfImp1[order(rfImp1$Overall), ]
print(test)
View(rfImp1)
# Sort the data frame by the 'Overall' column in ascending order
rfImp1_sorted <- rfImp1[order(rfImp1$Overall), ]
# Print the sorted data frame
print(rfImp1_sorted)
# Sort the data frame by the 'Overall' column in ascending order
rfImp1_sorted <- rfImp1[order(rfImp1$Overall), ]
# Print the sorted data frame with row names
print(rfImp1_sorted, row.names = TRUE)
# Sort the data frame by the 'Overall' column in ascending order
rfImp1_sorted <- rfImp1[order(rfImp1$Overall), ]
# Print the sorted data frame with row names
print(rfImp1_sorted, row.names = TRUE)
rfImp1
View(rfImp1)
# First, let's ensure the row names are as you've mentioned
rownames(rfImp1) <- paste0("V", 1:10)
# Now, we'll sort the data frame by the "Overall" column
rfImp1_sorted <- rfImp1[order(rfImp1$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
# Print the sorted data frame
print(rfImp1_sorted)
# First, let's ensure the row names are as you've mentioned
rownames(rfImp1) <- paste0("V", 1:10)
# Now, we'll sort the data frame by the "Overall" column
rfImp1_sorted <- rfImp1[order(-rfImp1$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
# Print the sorted data frame
print(rfImp1_sorted)
# First, let's ensure the row names are as you've mentioned
rownames(rfImp2) <- paste0("V", 1:10)
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(earth)
library(fpp3)
library(dplyr)
library(ggplot2)
library(mlbench)
library(randomForest)
library(RANN)
library(tidyr)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
model1 <- randomForest(y ~ ., data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
# First, let's ensure the row names are as you've mentioned
rownames(rfImp1) <- paste0("V", 1:10)
# Now, we'll sort the data frame by the "Overall" column
rfImp1_sorted <- rfImp1[order(-rfImp1$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
# Print the sorted data frame
print(rfImp1_sorted)
simulated$duplicate1 <- simulated$V1 + rnorm(200) * .1
cor(simulated$duplicate1, simulated$V1)
simulated2<-simulated
simulated2$duplicate1 <- simulated2$V1 + rnorm(200) * .1
cor(simulated2$duplicate1, simulated2$V1)
model2 <- randomForest(y ~ ., data = simulated2, importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
# First, let's ensure the row names are as you've mentioned
rownames(rfImp2) <- paste0("V", 1:10)
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(earth)
library(fpp3)
library(dplyr)
library(ggplot2)
library(mlbench)
library(randomForest)
library(RANN)
library(tidyr)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
model1 <- randomForest(y ~ ., data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
# First, let's ensure the row names are as you've mentioned
rownames(rfImp1) <- paste0("V", 1:10)
# Now, we'll sort the data frame by the "Overall" column
rfImp1_sorted <- rfImp1[order(-rfImp1$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
# Print the sorted data frame
print(rfImp1_sorted)
simulated$duplicate1 <- simulated$V1 + rnorm(200) * .1
cor(simulated$duplicate1, simulated$V1)
simulated2<-simulated
simulated2$duplicate1 <- simulated2$V1 + rnorm(200) * .1
cor(simulated2$duplicate1, simulated2$V1)
model2 <- randomForest(y ~ ., data = simulated2, importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
# First, let's ensure the row names are as you've mentioned
rownames(rfImp2) <- paste0("V", 1:10)
View(rfImp2)
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(earth)
library(fpp3)
library(dplyr)
library(ggplot2)
library(mlbench)
library(randomForest)
library(RANN)
library(tidyr)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
model1 <- randomForest(y ~ ., data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
# First, let's ensure the row names are as you've mentioned
rownames(rfImp1) <- paste0("V", 1:10)
# Now, we'll sort the data frame by the "Overall" column
rfImp1_sorted <- rfImp1[order(-rfImp1$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
# Print the sorted data frame
print(rfImp1_sorted)
simulated$duplicate1 <- simulated$V1 + rnorm(200) * .1
cor(simulated$duplicate1, simulated$V1)
simulated2<-simulated
simulated2$duplicate1 <- simulated2$V1 + rnorm(200) * .1
cor(simulated2$duplicate1, simulated2$V1)
model2 <- randomForest(y ~ ., data = simulated2, importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
View(rfImp2)
# Assuming your data frame is named df and you have a row named "duplicate1" that you want to remove
rfImp2 <- rfImp2[rownames(rfImp2) != "duplicate1", , drop = FALSE]
# First, let's ensure the row names are as you've mentioned
rownames(rfImp2) <- paste0("V", 1:10)
# Now, we'll sort the data frame by the "Overall" column
rfImp2_sorted <- rfImp2[order(-rfImp2$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
# Print the sorted data frame
print(rfImp2_sorted)
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(earth)
library(fpp3)
library(dplyr)
library(ggplot2)
library(mlbench)
library(randomForest)
library(RANN)
library(tidyr)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
model1 <- randomForest(y ~ ., data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
rownames(rfImp1) <- paste0("V", 1:10)
rfImp1_sorted <- rfImp1[order(-rfImp1$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
print(rfImp1_sorted)
simulated$duplicate1 <- simulated$V1 + rnorm(200) * .1
cor(simulated$duplicate1, simulated$V1)
simulated2<-simulated
simulated2$duplicate1 <- simulated2$V1 + rnorm(200) * .1
cor(simulated2$duplicate1, simulated2$V1)
model2 <- randomForest(y ~ ., data = simulated2, importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
rownames(rfImp2) <- c(paste0("V", 1:10), "duplicate1")
rfImp2_sorted <- rfImp2[order(-rfImp2$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
print(rfImp2_sorted)
library(party)
install.packages("party")
library(party)
model3 <- cforest(y ~., data = simulated)
order(-varimp(model3, conditional = FALSE)) #default conditional: FALSE
order(-varimp(model3, conditional = TRUE))
model3 <- cforest(y ~., data = simulated)
order(-varimp(model3, conditional = FALSE)) #default conditional: FALSE
order(-varimp(model3, conditional = TRUE))
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(dplyr)
library(earth)
library(fpp3)
library(gbm)
install.packages("gbm")
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(Cubist)
install.packages("Cubist")
set.seed(624)
model_gbm<- gbm(y ~., data = simulated, distribution = "gaussian")
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(Cubist)
library(dplyr)
library(earth)
library(fpp3)
library(gbm)
library(ggplot2)
library(mlbench)
library(party)
library(randomForest)
library(RANN)
library(tidyr)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
model1 <- randomForest(y ~ ., data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
rownames(rfImp1) <- paste0("V", 1:10)
rfImp1_sorted <- rfImp1[order(-rfImp1$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
print(rfImp1_sorted)
simulated$duplicate1 <- simulated$V1 + rnorm(200) * .1
cor(simulated$duplicate1, simulated$V1)
simulated2<-simulated
simulated2$duplicate1 <- simulated2$V1 + rnorm(200) * .1
cor(simulated2$duplicate1, simulated2$V1)
model2 <- randomForest(y ~ ., data = simulated2, importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
rownames(rfImp2) <- c(paste0("V", 1:10), "duplicate1")
rfImp2_sorted <- rfImp2[order(-rfImp2$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
print(rfImp2_sorted)
model3 <- cforest(y ~., data = simulated)
order(-varimp(model3, conditional = FALSE)) #default conditional: FALSE
order(-varimp(model3, conditional = TRUE))
set.seed(624)
model_gbm<- gbm(y ~., data = simulated, distribution = "gaussian")
summary.gbm(model_gbm)
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
order(-varImp(cubist_model))
cubist_model
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
cubist_model
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
sorted_list <- sort(unlist(my_list), decreasing = TRUE)
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
cubist_model
sorted_list <- sort(unlist(my_list), decreasing = TRUE)
sorted_list <- sort(unlist(cubist_model), decreasing = TRUE)
sorted_list <- sort(unlist(cubist_model), decreasing = TRUE)
View(cubist_model)
as.data.frame(cubist_model)
order(cubist_model)
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
print(cubist_model)
summary(cubist_model)
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
summary(cubist_model)
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
print(cubist_model)
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
order(-varImp(cubist_model))
simulated_x <- subset(simulated, select = -c(y))
# Ensure 'simulated_x' is a data frame without 'y'
if (is.data.frame(simulated_x) && "y" %in% names(simulated)) {
stop("simulated_x still contains the outcome variable 'y'.")
}
# Assuming 'simulated' is a data frame with a column 'y'
# Create 'simulated_x' by dropping the 'y' column
simulated_x <- simulated[, !(names(simulated) %in% "y")]
# Check if 'y' is not in the column names of 'simulated_x'
if ("y" %in% names(simulated_x)) {
stop("simulated_x still contains the outcome variable 'y'.")
}
# Fit the cubist model
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
# Print the model summary
summary(cubist_model)
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
varImp(cubist_model)
rownames(varImp(cubist_model)) <- c(paste0("V", 1:10), "duplicate1")
cube_model_v2<-varImp(cubist_model)
# rownames(varImp(cubist_model)) <- c(paste0("V", 1:10), "duplicate1")
# cubist_sorted <- varImp(cubist_model)[order(-rfImp2$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
# print(cubist_sorted)
View(cube_model_v2)
View(cube_model_v2)
cube_model_v2<-varImp(cubist_model)
rownames(varImp(cube_model_v2)) <- c(paste0("V", 1:10), "duplicate1")
cube_model_v2<-varImp(cubist_model)
rownames(cube_model_v2) <- c(paste0("V", 1:10), "duplicate1")
cubist_sorted <- varImp(cube_model_v2)[order(-cube_model_v2$Overall), , drop = FALSE]
cube_model_v2<-varImp(cubist_model)
rownames(cube_model_v2) <- c(paste0("V", 1:10), "duplicate1")
cubist_sorted <- cube_model_v2[order(-cube_model_v2$Overall), , drop = FALSE]
print(cubist_sorted)
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
set.seed(624)
model_gbm<- gbm(y ~., data = simulated, distribution = "gaussian")
#summary.gbm(model_gbm)
varImp(model_gbm)
set.seed(624)
model_gbm<- gbm(y ~., data = simulated, distribution = "gaussian")
summary.gbm(model_gbm)
set.seed(624)
#samples for predictors
low <- sample(0:50, 500, replace = T)
medium <- sample(0:500, 500, replace = T)
high <- sample(0:5000, 500, replace = T)
#response
y <- low + medium + high + rnorm(250)
#check variance of predictors
var(low)
var(medium)
var(high)
sim_data <- data.frame(low, medium, high, y)
diff_gran_model <- randomForest(y ~., data = sim_data, importance = TRUE, ntree = 1000)
varImp(diff_gran_model, scale=FALSE)
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(Cubist)
library(dplyr)
library(earth)
library(fpp3)
library(gbm)
library(ggplot2)
library(mlbench)
library(party)
library(randomForest)
library(RANN)
library(tidyr)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
model1 <- randomForest(y ~ ., data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
rownames(rfImp1) <- paste0("V", 1:10)
rfImp1_sorted <- rfImp1[order(-rfImp1$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
print(rfImp1_sorted)
simulated$duplicate1 <- simulated$V1 + rnorm(200) * .1
cor(simulated$duplicate1, simulated$V1)
simulated2<-simulated
simulated2$duplicate1 <- simulated2$V1 + rnorm(200) * .1
cor(simulated2$duplicate1, simulated2$V1)
model2 <- randomForest(y ~ ., data = simulated2, importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
rownames(rfImp2) <- c(paste0("V", 1:10), "duplicate1")
rfImp2_sorted <- rfImp2[order(-rfImp2$Overall), , drop = FALSE] # 'drop = FALSE' ensures the result is still a data frame
print(rfImp2_sorted)
model3 <- cforest(y ~., data = simulated)
order(-varimp(model3, conditional = FALSE)) #default conditional: FALSE
order(-varimp(model3, conditional = TRUE))
set.seed(624)
model_gbm<- gbm(y ~., data = simulated, distribution = "gaussian")
summary.gbm(model_gbm)
simulated_x <- subset(simulated, select = -c(y))
cubist_model <- cubist(x = simulated_x, y = simulated$y, committees = 100)
cube_model_v2<-varImp(cubist_model)
rownames(cube_model_v2) <- c(paste0("V", 1:10), "duplicate1")
cubist_sorted <- cube_model_v2[order(-cube_model_v2$Overall), , drop = FALSE]
print(cubist_sorted)
set.seed(624)
#samples for predictors
low <- sample(0:50, 500, replace = T)
medium <- sample(0:500, 500, replace = T)
high <- sample(0:5000, 500, replace = T)
#response
y <- low + medium + high + rnorm(250)
#check variance of predictors
var(low)
var(medium)
var(high)
